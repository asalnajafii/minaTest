(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@ngx-formly/core'), require('@angular/forms'), require('rxjs'), require('@angular/common'), require('@ngx-formly/core/select')) :
    typeof define === 'function' && define.amd ? define('@ngx-formly/bootstrap', ['exports', '@angular/core', '@ngx-formly/core', '@angular/forms', 'rxjs', '@angular/common', '@ngx-formly/core/select'], factory) :
    (factory((global['ngx-formly'] = global['ngx-formly'] || {}, global['ngx-formly'].bootstrap = {}),global.ng.core,null,global.ng.forms,global.rxjs,global.ng.common,null));
}(this, (function (exports,core,core$1,forms,rxjs,common,select) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var FormlyFieldCheckbox = (function (_super) {
        __extends(FormlyFieldCheckbox, _super);
        function FormlyFieldCheckbox() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FormlyFieldCheckbox.decorators = [
            { type: core.Component, args: [{
                        selector: 'formly-field-checkbox',
                        template: "\n    <div class=\"custom-control custom-checkbox\">\n      <input class=\"custom-control-input\" type=\"checkbox\"\n        [class.is-invalid]=\"showError\"\n        [indeterminate]=\"to.indeterminate && field.formControl.value === null\"\n        [formControl]=\"formControl\"\n        [formlyAttributes]=\"field\">\n      <label class=\"custom-control-label\" [for]=\"id\">\n        {{ to.label }}\n        <span *ngIf=\"to.required && to.hideRequiredMarker !== true\">*</span>\n      </label>\n    </div>\n  ",
                    },] },
        ];
        return FormlyFieldCheckbox;
    }(core$1.FieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var FormlyFieldMultiCheckbox = (function (_super) {
        __extends(FormlyFieldMultiCheckbox, _super);
        function FormlyFieldMultiCheckbox() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @param {?} model
         * @param {?} field
         * @return {?}
         */
        FormlyFieldMultiCheckbox.createControl = /**
         * @param {?} model
         * @param {?} field
         * @return {?}
         */
            function (model, field) {
                if (field.templateOptions.options instanceof rxjs.Observable) {
                    throw new Error("[Formly Error] You cannot pass an Observable to a multicheckbox yet.");
                }
                /** @type {?} */
                var controls = field.templateOptions.options.reduce(function (obj, option) {
                    obj[option.key] = new forms.FormControl(model ? model[option.key] : undefined);
                    return obj;
                }, {});
                return new forms.FormGroup(controls, field.validators ? field.validators.validation : undefined, field.asyncValidators ? field.asyncValidators.validation : undefined);
            };
        FormlyFieldMultiCheckbox.decorators = [
            { type: core.Component, args: [{
                        selector: 'formly-field-multicheckbox',
                        template: "\n    <div class=\"custom-control custom-checkbox\" *ngFor=\"let option of to.options; let i = index;\">\n      <input class=\"custom-control-input\" type=\"checkbox\"\n        [id]=\"id + '_' + i\"\n        [value]=\"option.value\"\n        [formControl]=\"formControl.get(option.key)\"\n        [formlyAttributes]=\"field\">\n      <label class=\"custom-control-label\" [for]=\"id + '_' + i\">\n        {{ option.value }}\n      </label>\n    </div>\n  ",
                    },] },
        ];
        return FormlyFieldMultiCheckbox;
    }(core$1.FieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var FormlyFieldInput = (function (_super) {
        __extends(FormlyFieldInput, _super);
        function FormlyFieldInput() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(FormlyFieldInput.prototype, "type", {
            get: /**
             * @return {?}
             */ function () {
                return this.to.type || 'text';
            },
            enumerable: true,
            configurable: true
        });
        FormlyFieldInput.decorators = [
            { type: core.Component, args: [{
                        selector: 'formly-field-input',
                        template: "\n    <input *ngIf=\"type !== 'number' else numberTmp\" [type]=\"type\" [formControl]=\"formControl\" class=\"form-control\" [formlyAttributes]=\"field\" [class.is-invalid]=\"showError\">\n    <ng-template #numberTmp>\n      <input type=\"number\" [formControl]=\"formControl\" class=\"form-control\" [formlyAttributes]=\"field\" [class.is-invalid]=\"showError\">\n    </ng-template>\n  ",
                        host: {
                            '[class.d-inline-flex]': 'to.addonLeft || to.addonRight',
                            '[class.custom-file]': 'to.addonLeft || to.addonRight',
                        },
                    },] },
        ];
        return FormlyFieldInput;
    }(core$1.FieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var FormlyFieldRadio = (function (_super) {
        __extends(FormlyFieldRadio, _super);
        function FormlyFieldRadio() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FormlyFieldRadio.decorators = [
            { type: core.Component, args: [{
                        selector: 'formly-field-radio',
                        template: "\n    <div [formGroup]=\"form\">\n      <div class=\"custom-control custom-radio\" *ngFor=\"let option of to.options | formlySelectOptions:field | async; let i = index;\">\n        <input class=\"custom-control-input\" type=\"radio\"\n          [id]=\"id + '_' + i\"\n          [name]=\"id\"\n          [class.is-invalid]=\"showError\"\n          [value]=\"option.value\"\n          [formControl]=\"formControl\"\n          [formlyAttributes]=\"field\">\n        <label class=\"custom-control-label\" [for]=\"id + '_' + i\">\n          {{ option.label }}\n        </label>\n      </div>\n    </div>\n  ",
                    },] },
        ];
        return FormlyFieldRadio;
    }(core$1.FieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var FormlyFieldTextArea = (function (_super) {
        __extends(FormlyFieldTextArea, _super);
        function FormlyFieldTextArea() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FormlyFieldTextArea.decorators = [
            { type: core.Component, args: [{
                        selector: 'formly-field-textarea',
                        template: "\n    <textarea [formControl]=\"formControl\" [cols]=\"to.cols\"\n      [rows]=\"to.rows\" class=\"form-control\" [class.is-invalid]=\"showError\"\n      [formlyAttributes]=\"field\">\n    </textarea>\n  ",
                    },] },
        ];
        return FormlyFieldTextArea;
    }(core$1.FieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var FormlyFieldSelect = (function (_super) {
        __extends(FormlyFieldSelect, _super);
        function FormlyFieldSelect() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FormlyFieldSelect.decorators = [
            { type: core.Component, args: [{
                        selector: 'formly-field-select',
                        template: "\n    <select *ngIf=\"to.multiple; else singleSelect\" class=\"form-control\"\n      multiple\n      [class.custom-select]=\"to.customSelect\"\n      [formControl]=\"formControl\"\n      [class.is-invalid]=\"showError\"\n      [formlyAttributes]=\"field\">\n        <ng-container *ngFor=\"let item of to.options | formlySelectOptions:field | async\">\n         <optgroup *ngIf=\"item.group\" label=\"{{item.label}}\">\n            <option *ngFor=\"let child of item.group\" [value]=\"child.value\" [disabled]=\"child.disabled\">\n              {{ child.label }}\n            </option>\n          </optgroup>\n          <option *ngIf=\"!item.group\" [value]=\"item.value\" [disabled]=\"item.disabled\">{{ item.label }}</option>\n        </ng-container>\n    </select>\n\n    <ng-template #singleSelect>\n      <select class=\"form-control\"\n        [formControl]=\"formControl\"\n        [class.custom-select]=\"to.customSelect\"\n        [class.is-invalid]=\"showError\"\n        [formlyAttributes]=\"field\">\n        <option *ngIf=\"to.placeholder\" value=\"\">{{ to.placeholder }}</option>\n        <ng-container *ngFor=\"let item of to.options | formlySelectOptions:field | async\">\n          <optgroup *ngIf=\"item.group\" label=\"{{item.label}}\">\n            <option *ngFor=\"let child of item.group\" [value]=\"child.value\" [disabled]=\"child.disabled\">\n              {{ child.label }}\n            </option>\n          </optgroup>\n          <option *ngIf=\"!item.group\" [value]=\"item.value\" [disabled]=\"item.disabled\">{{ item.label }}</option>\n        </ng-container>\n      </select>\n    </ng-template>\n  ",
                    },] },
        ];
        return FormlyFieldSelect;
    }(core$1.FieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var FormlyWrapperFormField = (function (_super) {
        __extends(FormlyWrapperFormField, _super);
        function FormlyWrapperFormField() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FormlyWrapperFormField.decorators = [
            { type: core.Component, args: [{
                        selector: 'formly-wrapper-form-field',
                        template: "\n    <div class=\"form-group\" [class.has-error]=\"showError\">\n      <label *ngIf=\"to.label && to.hideLabel !== true\" [attr.for]=\"id\">\n        {{ to.label }} <ng-container *ngIf=\"to.required && to.hideRequiredMarker !== true\">*</ng-container>\n      </label>\n\n      <ng-template #fieldComponent></ng-template>\n\n      <div *ngIf=\"showError\" class=\"invalid-feedback\" [style.display]=\"'block'\">\n        <formly-validation-message [field]=\"field\"></formly-validation-message>\n      </div>\n\n      <small *ngIf=\"to.description\" class=\"form-text text-muted\">{{ to.description }}</small>\n    </div>\n  ",
                    },] },
        ];
        FormlyWrapperFormField.propDecorators = {
            fieldComponent: [{ type: core.ViewChild, args: ['fieldComponent', { read: core.ViewContainerRef },] }]
        };
        return FormlyWrapperFormField;
    }(core$1.FieldWrapper));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var FormlyWrapperAddons = (function (_super) {
        __extends(FormlyWrapperAddons, _super);
        function FormlyWrapperAddons() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @param {?} $event
         * @return {?}
         */
        FormlyWrapperAddons.prototype.addonRightClick = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                if (this.to["addonRight"].onClick) {
                    this.to["addonRight"].onClick(this.to, this, $event);
                }
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        FormlyWrapperAddons.prototype.addonLeftClick = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                if (this.to["addonLeft"].onClick) {
                    this.to["addonLeft"].onClick(this.to, this, $event);
                }
            };
        FormlyWrapperAddons.decorators = [
            { type: core.Component, args: [{
                        selector: 'formly-wrapper-addons',
                        template: "\n    <div class=\"input-group\">\n      <div class=\"input-group-prepend\"\n        *ngIf=\"to.addonLeft\"\n        [ngStyle]=\"{cursor: to.addonLeft.onClick ? 'pointer' : 'inherit'}\"\n        (click)=\"addonLeftClick($event)\">\n        <i class=\"input-group-text\" [ngClass]=\"to.addonLeft.class\" *ngIf=\"to.addonLeft.class\"></i>\n        <span *ngIf=\"to.addonLeft.text\" class=\"input-group-text\">{{ to.addonLeft.text }}</span>\n      </div>\n      <ng-template #fieldComponent></ng-template>\n      <div class=\"input-group-append\"\n        *ngIf=\"to.addonRight\"\n        [ngStyle]=\"{cursor: to.addonRight.onClick ? 'pointer' : 'inherit'}\"\n        (click)=\"addonRightClick($event)\">\n        <i class=\"input-group-text\" [ngClass]=\"to.addonRight.class\" *ngIf=\"to.addonRight.class\"></i>\n        <span *ngIf=\"to.addonRight.text\" class=\"input-group-text\">{{ to.addonRight.text }}</span>\n      </div>\n    </div>\n  ",
                        styles: ["\n    :host ::ng-deep .input-group>:not(:first-child)> .form-control {\n      border-top-left-radius: 0;\n      border-bottom-left-radius: 0;\n    }\n    :host ::ng-deep .input-group>:not(:last-child)> .form-control {\n      border-top-right-radius: 0;\n      border-bottom-right-radius: 0;\n    }\n  "],
                    },] },
        ];
        FormlyWrapperAddons.propDecorators = {
            fieldComponent: [{ type: core.ViewChild, args: ['fieldComponent', { read: core.ViewContainerRef },] }]
        };
        return FormlyWrapperAddons;
    }(core$1.FieldWrapper));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var TemplateAddons = (function () {
        function TemplateAddons() {
        }
        /**
         * @param {?} fc
         * @return {?}
         */
        TemplateAddons.prototype.run = /**
         * @param {?} fc
         * @return {?}
         */
            function (fc) {
                fc.templateManipulators.postWrapper.push(function (field) {
                    if (field && field.templateOptions && (field.templateOptions["addonLeft"] || field.templateOptions["addonRight"])) {
                        return 'addons';
                    }
                });
            };
        return TemplateAddons;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var FIELD_TYPE_COMPONENTS = [
        FormlyFieldInput,
        FormlyFieldCheckbox,
        FormlyFieldRadio,
        FormlyFieldSelect,
        FormlyFieldTextArea,
        FormlyFieldMultiCheckbox,
        FormlyWrapperAddons,
        FormlyWrapperFormField,
    ];
    /** @type {?} */
    var BOOTSTRAP_FORMLY_CONFIG = {
        types: [
            {
                name: 'input',
                component: FormlyFieldInput,
                wrappers: ['form-field'],
            },
            {
                name: 'checkbox',
                component: FormlyFieldCheckbox,
                wrappers: ['form-field'],
                defaultOptions: {
                    templateOptions: {
                        indeterminate: true,
                        hideLabel: true,
                    },
                },
            },
            {
                name: 'radio',
                component: FormlyFieldRadio,
                wrappers: ['form-field'],
                defaultOptions: {
                    templateOptions: {
                        options: [],
                    },
                },
            },
            {
                name: 'select',
                component: FormlyFieldSelect,
                wrappers: ['form-field'],
                defaultOptions: {
                    templateOptions: {
                        options: [],
                    },
                },
            },
            {
                name: 'textarea',
                component: FormlyFieldTextArea,
                wrappers: ['form-field'],
                defaultOptions: {
                    templateOptions: {
                        cols: 1,
                        rows: 1,
                    },
                },
            },
            {
                name: 'multicheckbox',
                component: FormlyFieldMultiCheckbox,
                wrappers: ['form-field'],
                defaultOptions: {
                    templateOptions: {
                        options: [],
                    },
                },
            },
        ],
        wrappers: [
            { name: 'addons', component: FormlyWrapperAddons },
            { name: 'form-field', component: FormlyWrapperFormField },
        ],
        manipulators: [
            { class: TemplateAddons, method: 'run' },
        ],
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var FormlyBootstrapModule = (function () {
        function FormlyBootstrapModule() {
        }
        FormlyBootstrapModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            FIELD_TYPE_COMPONENTS,
                        ],
                        imports: [
                            common.CommonModule,
                            forms.ReactiveFormsModule,
                            select.FormlySelectModule,
                            core$1.FormlyModule.forRoot(BOOTSTRAP_FORMLY_CONFIG),
                        ],
                    },] },
        ];
        return FormlyBootstrapModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.FormlyBootstrapModule = FormlyBootstrapModule;
    exports.FormlyFieldCheckbox = FormlyFieldCheckbox;
    exports.FormlyFieldMultiCheckbox = FormlyFieldMultiCheckbox;
    exports.FormlyFieldInput = FormlyFieldInput;
    exports.FormlyFieldRadio = FormlyFieldRadio;
    exports.FormlyFieldTextArea = FormlyFieldTextArea;
    exports.FormlyFieldSelect = FormlyFieldSelect;
    exports.FormlyWrapperFormField = FormlyWrapperFormField;
    exports.FormlyWrapperAddons = FormlyWrapperAddons;
    exports.ɵb = BOOTSTRAP_FORMLY_CONFIG;
    exports.ɵa = FIELD_TYPE_COMPONENTS;
    exports.ɵc = TemplateAddons;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,