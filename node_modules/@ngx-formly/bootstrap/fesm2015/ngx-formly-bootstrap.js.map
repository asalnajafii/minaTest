{"version":3,"file":"ngx-formly-bootstrap.js.map","sources":["ng://@ngx-formly/bootstrap/lib/types/checkbox.ts","ng://@ngx-formly/bootstrap/lib/types/multicheckbox.ts","ng://@ngx-formly/bootstrap/lib/types/input.ts","ng://@ngx-formly/bootstrap/lib/types/radio.ts","ng://@ngx-formly/bootstrap/lib/types/textarea.ts","ng://@ngx-formly/bootstrap/lib/types/select.ts","ng://@ngx-formly/bootstrap/lib/wrappers/form-field.wrapper.ts","ng://@ngx-formly/bootstrap/lib/wrappers/addons.ts","ng://@ngx-formly/bootstrap/lib/run/addon.ts","ng://@ngx-formly/bootstrap/lib/bootstrap.config.ts","ng://@ngx-formly/bootstrap/lib/bootstrap.module.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FieldType } from '@ngx-formly/core';\n\n@Component({\n  selector: 'formly-field-checkbox',\n  template: `\n    <div class=\"custom-control custom-checkbox\">\n      <input class=\"custom-control-input\" type=\"checkbox\"\n        [class.is-invalid]=\"showError\"\n        [indeterminate]=\"to.indeterminate && field.formControl.value === null\"\n        [formControl]=\"formControl\"\n        [formlyAttributes]=\"field\">\n      <label class=\"custom-control-label\" [for]=\"id\">\n        {{ to.label }}\n        <span *ngIf=\"to.required && to.hideRequiredMarker !== true\">*</span>\n      </label>\n    </div>\n  `,\n})\nexport class FormlyFieldCheckbox extends FieldType { }\n","import { Component } from '@angular/core';\nimport { FormGroup, FormControl, AbstractControl } from '@angular/forms';\nimport { FieldType, FormlyFieldConfig } from '@ngx-formly/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'formly-field-multicheckbox',\n  template: `\n    <div class=\"custom-control custom-checkbox\" *ngFor=\"let option of to.options; let i = index;\">\n      <input class=\"custom-control-input\" type=\"checkbox\"\n        [id]=\"id + '_' + i\"\n        [value]=\"option.value\"\n        [formControl]=\"formControl.get(option.key)\"\n        [formlyAttributes]=\"field\">\n      <label class=\"custom-control-label\" [for]=\"id + '_' + i\">\n        {{ option.value }}\n      </label>\n    </div>\n  `,\n})\nexport class FormlyFieldMultiCheckbox extends FieldType {\n\n  static createControl(model: any, field: FormlyFieldConfig): AbstractControl {\n    if (field.templateOptions.options instanceof Observable) {\n      throw new Error(`[Formly Error] You cannot pass an Observable to a multicheckbox yet.`);\n    }\n\n    const controls = field.templateOptions.options.reduce((obj, option) => {\n      obj[option.key] = new FormControl(model ? model[option.key] : undefined);\n      return obj;\n    }, {});\n\n    return new FormGroup(\n      controls,\n      field.validators ? field.validators.validation : undefined,\n      field.asyncValidators ? field.asyncValidators.validation : undefined,\n    );\n  }\n\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from '@ngx-formly/core';\n\n@Component({\n  selector: 'formly-field-input',\n  template: `\n    <input *ngIf=\"type !== 'number' else numberTmp\" [type]=\"type\" [formControl]=\"formControl\" class=\"form-control\" [formlyAttributes]=\"field\" [class.is-invalid]=\"showError\">\n    <ng-template #numberTmp>\n      <input type=\"number\" [formControl]=\"formControl\" class=\"form-control\" [formlyAttributes]=\"field\" [class.is-invalid]=\"showError\">\n    </ng-template>\n  `,\n  host: {\n    '[class.d-inline-flex]': 'to.addonLeft || to.addonRight',\n    '[class.custom-file]': 'to.addonLeft || to.addonRight',\n  },\n})\nexport class FormlyFieldInput extends FieldType {\n  get type() {\n    return this.to.type || 'text';\n  }\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from '@ngx-formly/core';\n\n@Component({\n  selector: 'formly-field-radio',\n  template: `\n    <div [formGroup]=\"form\">\n      <div class=\"custom-control custom-radio\" *ngFor=\"let option of to.options | formlySelectOptions:field | async; let i = index;\">\n        <input class=\"custom-control-input\" type=\"radio\"\n          [id]=\"id + '_' + i\"\n          [name]=\"id\"\n          [class.is-invalid]=\"showError\"\n          [value]=\"option.value\"\n          [formControl]=\"formControl\"\n          [formlyAttributes]=\"field\">\n        <label class=\"custom-control-label\" [for]=\"id + '_' + i\">\n          {{ option.label }}\n        </label>\n      </div>\n    </div>\n  `,\n})\nexport class FormlyFieldRadio extends FieldType {}\n","import { Component } from '@angular/core';\nimport { FieldType } from '@ngx-formly/core';\n\n@Component({\n  selector: 'formly-field-textarea',\n  template: `\n    <textarea [formControl]=\"formControl\" [cols]=\"to.cols\"\n      [rows]=\"to.rows\" class=\"form-control\" [class.is-invalid]=\"showError\"\n      [formlyAttributes]=\"field\">\n    </textarea>\n  `,\n})\nexport class FormlyFieldTextArea extends FieldType {\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from '@ngx-formly/core';\n\n@Component({\n  selector: 'formly-field-select',\n  template: `\n    <select *ngIf=\"to.multiple; else singleSelect\" class=\"form-control\"\n      multiple\n      [class.custom-select]=\"to.customSelect\"\n      [formControl]=\"formControl\"\n      [class.is-invalid]=\"showError\"\n      [formlyAttributes]=\"field\">\n        <ng-container *ngFor=\"let item of to.options | formlySelectOptions:field | async\">\n         <optgroup *ngIf=\"item.group\" label=\"{{item.label}}\">\n            <option *ngFor=\"let child of item.group\" [value]=\"child.value\" [disabled]=\"child.disabled\">\n              {{ child.label }}\n            </option>\n          </optgroup>\n          <option *ngIf=\"!item.group\" [value]=\"item.value\" [disabled]=\"item.disabled\">{{ item.label }}</option>\n        </ng-container>\n    </select>\n\n    <ng-template #singleSelect>\n      <select class=\"form-control\"\n        [formControl]=\"formControl\"\n        [class.custom-select]=\"to.customSelect\"\n        [class.is-invalid]=\"showError\"\n        [formlyAttributes]=\"field\">\n        <option *ngIf=\"to.placeholder\" value=\"\">{{ to.placeholder }}</option>\n        <ng-container *ngFor=\"let item of to.options | formlySelectOptions:field | async\">\n          <optgroup *ngIf=\"item.group\" label=\"{{item.label}}\">\n            <option *ngFor=\"let child of item.group\" [value]=\"child.value\" [disabled]=\"child.disabled\">\n              {{ child.label }}\n            </option>\n          </optgroup>\n          <option *ngIf=\"!item.group\" [value]=\"item.value\" [disabled]=\"item.disabled\">{{ item.label }}</option>\n        </ng-container>\n      </select>\n    </ng-template>\n  `,\n})\nexport class FormlyFieldSelect extends FieldType {}\n","import { Component, ViewChild, ViewContainerRef } from '@angular/core';\nimport { FieldWrapper } from '@ngx-formly/core';\n\n@Component({\n  selector: 'formly-wrapper-form-field',\n  template: `\n    <div class=\"form-group\" [class.has-error]=\"showError\">\n      <label *ngIf=\"to.label && to.hideLabel !== true\" [attr.for]=\"id\">\n        {{ to.label }} <ng-container *ngIf=\"to.required && to.hideRequiredMarker !== true\">*</ng-container>\n      </label>\n\n      <ng-template #fieldComponent></ng-template>\n\n      <div *ngIf=\"showError\" class=\"invalid-feedback\" [style.display]=\"'block'\">\n        <formly-validation-message [field]=\"field\"></formly-validation-message>\n      </div>\n\n      <small *ngIf=\"to.description\" class=\"form-text text-muted\">{{ to.description }}</small>\n    </div>\n  `,\n})\nexport class FormlyWrapperFormField extends FieldWrapper {\n  @ViewChild('fieldComponent', { read: ViewContainerRef }) fieldComponent: ViewContainerRef;\n}\n","import { Component, ViewChild, ViewContainerRef } from '@angular/core';\nimport { FieldWrapper } from '@ngx-formly/core';\n\n@Component({\n  selector: 'formly-wrapper-addons',\n  template: `\n    <div class=\"input-group\">\n      <div class=\"input-group-prepend\"\n        *ngIf=\"to.addonLeft\"\n        [ngStyle]=\"{cursor: to.addonLeft.onClick ? 'pointer' : 'inherit'}\"\n        (click)=\"addonLeftClick($event)\">\n        <i class=\"input-group-text\" [ngClass]=\"to.addonLeft.class\" *ngIf=\"to.addonLeft.class\"></i>\n        <span *ngIf=\"to.addonLeft.text\" class=\"input-group-text\">{{ to.addonLeft.text }}</span>\n      </div>\n      <ng-template #fieldComponent></ng-template>\n      <div class=\"input-group-append\"\n        *ngIf=\"to.addonRight\"\n        [ngStyle]=\"{cursor: to.addonRight.onClick ? 'pointer' : 'inherit'}\"\n        (click)=\"addonRightClick($event)\">\n        <i class=\"input-group-text\" [ngClass]=\"to.addonRight.class\" *ngIf=\"to.addonRight.class\"></i>\n        <span *ngIf=\"to.addonRight.text\" class=\"input-group-text\">{{ to.addonRight.text }}</span>\n      </div>\n    </div>\n  `,\n  styles: [`\n    :host ::ng-deep .input-group>:not(:first-child)> .form-control {\n      border-top-left-radius: 0;\n      border-bottom-left-radius: 0;\n    }\n    :host ::ng-deep .input-group>:not(:last-child)> .form-control {\n      border-top-right-radius: 0;\n      border-bottom-right-radius: 0;\n    }\n  `],\n})\nexport class FormlyWrapperAddons extends FieldWrapper {\n  @ViewChild('fieldComponent', {read: ViewContainerRef}) fieldComponent: ViewContainerRef;\n\n  addonRightClick($event: any) {\n    if (this.to.addonRight.onClick) {\n      this.to.addonRight.onClick(this.to, this, $event);\n    }\n  }\n\n  addonLeftClick($event: any) {\n    if (this.to.addonLeft.onClick) {\n      this.to.addonLeft.onClick(this.to, this, $event);\n    }\n  }\n}\n","import { FormlyConfig } from '@ngx-formly/core';\n\nexport class TemplateAddons {\n  run(fc: FormlyConfig) {\n    fc.templateManipulators.postWrapper.push((field) => {\n      if (field && field.templateOptions && (field.templateOptions.addonLeft || field.templateOptions.addonRight)) {\n        return 'addons';\n      }\n    });\n  }\n}\n","import { ConfigOption } from '@ngx-formly/core';\nimport { TemplateAddons } from './run/addon';\nimport {\n  FormlyFieldInput,\n  FormlyFieldCheckbox,\n  FormlyFieldRadio,\n  FormlyFieldSelect,\n  FormlyFieldTextArea,\n  FormlyFieldMultiCheckbox,\n} from './types/types';\nimport {\n  FormlyWrapperAddons,\n  FormlyWrapperFormField,\n} from './wrappers/wrappers';\n\nexport const FIELD_TYPE_COMPONENTS = [\n  // types\n  FormlyFieldInput,\n  FormlyFieldCheckbox,\n  FormlyFieldRadio,\n  FormlyFieldSelect,\n  FormlyFieldTextArea,\n  FormlyFieldMultiCheckbox,\n\n  // wrappers\n  FormlyWrapperAddons,\n  FormlyWrapperFormField,\n];\n\nexport const BOOTSTRAP_FORMLY_CONFIG: ConfigOption = {\n  types: [\n    {\n      name: 'input',\n      component: FormlyFieldInput,\n      wrappers: ['form-field'],\n    },\n    {\n      name: 'checkbox',\n      component: FormlyFieldCheckbox,\n      wrappers: ['form-field'],\n      defaultOptions: {\n        templateOptions: {\n          indeterminate: true,\n          hideLabel: true,\n        },\n      },\n    },\n    {\n      name: 'radio',\n      component: FormlyFieldRadio,\n      wrappers: ['form-field'],\n      defaultOptions: {\n        templateOptions: {\n          options: [],\n        },\n      },\n    },\n    {\n      name: 'select',\n      component: FormlyFieldSelect,\n      wrappers: ['form-field'],\n      defaultOptions: {\n        templateOptions: {\n          options: [],\n        },\n      },\n    },\n    {\n      name: 'textarea',\n      component: FormlyFieldTextArea,\n      wrappers: ['form-field'],\n      defaultOptions: {\n        templateOptions: {\n          cols: 1,\n          rows: 1,\n        },\n      },\n    },\n    {\n      name: 'multicheckbox',\n      component: FormlyFieldMultiCheckbox,\n      wrappers: ['form-field'],\n      defaultOptions: {\n        templateOptions: {\n          options: [],\n        },\n      },\n    },\n  ],\n  wrappers: [\n    {name: 'addons', component: FormlyWrapperAddons},\n    {name: 'form-field', component: FormlyWrapperFormField},\n  ],\n  manipulators: [\n    {class: TemplateAddons, method: 'run'},\n  ],\n};\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FormlyModule } from '@ngx-formly/core';\nimport { FormlySelectModule } from '@ngx-formly/core/select';\nimport { BOOTSTRAP_FORMLY_CONFIG, FIELD_TYPE_COMPONENTS } from './bootstrap.config';\n\n@NgModule({\n  declarations: [\n    FIELD_TYPE_COMPONENTS,\n  ],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormlySelectModule,\n    FormlyModule.forRoot(BOOTSTRAP_FORMLY_CONFIG),\n  ],\n})\nexport class FormlyBootstrapModule {\n}\n"],"names":[],"mappings":"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"}
