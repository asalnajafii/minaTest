{"version":3,"sources":["null","ng://@ngx-formly/core/lib/utils.ts","ng://@ngx-formly/core/lib/services/formly.config.ts","ng://@ngx-formly/core/lib/services/formly.form.builder.ts","ng://@ngx-formly/core/lib/components/formly.form.ts","ng://@ngx-formly/core/lib/components/formly.field.ts","ng://@ngx-formly/core/lib/components/formly.attributes.ts","ng://@ngx-formly/core/lib/templates/field.type.ts","ng://@ngx-formly/core/lib/templates/field-array.type.ts","ng://@ngx-formly/core/lib/templates/field.wrapper.ts","ng://@ngx-formly/core/lib/components/formly.group.ts","ng://@ngx-formly/core/lib/templates/formly.validation-message.ts","ng://@ngx-formly/core/lib/extensions/field-expression/utils.ts","ng://@ngx-formly/core/lib/extensions/field-expression/field-expression.ts","ng://@ngx-formly/core/lib/templates/field-template.type.ts","ng://@ngx-formly/core/lib/core.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__read","o","m","Symbol","iterator","r","e","ar","next","done","push","value","error","__spread","concat","getKeyPath","field","key","keyPath","pathElements","split","pathElements_1","__values","tslib_1.__values","pathElements_1_1","pathElement","replace","test","parseInt","path","slice","FORMLY_VALIDATORS","assignModelValue","model","shift","isObject","getFieldValue","paths","parent","reverseDeepMerge","dest","args","_i","forEach","src","srcArg","isNullOrUndefined","isFunction","clone","obj1","obj2","getPrototypeOf","isArray","undefined","isUndefined","x","RegExp","Observable","AbstractControl","toString","Date","getTime","map","v","keys","k","removeFieldControl","form","FormArray","removeAt","FormGroup","removeControl","FORMLY_CONFIG","InjectionToken","preWrapper","postWrapper","fieldTransform","showError","formControl","invalid","touched","options","parentForm","submitted","validation","show","FormlyConfig","addConfig","config","_this","types","type","setType","validators","validator","setValidator","wrappers","wrapper","setWrapper","manipulators","manipulator","setManipulator","validationMessages","addValidatorMessage","name","message","extensions","c","extension","extras","option","component","extends","defaultOptions","componentFactoryResolver","setTypeWrapper","getType","Error","mergeExtendedType","getMergedField","extendDefaults","optionsTypes","getWrapper","indexOf","getValidator","messages","getValidatorMessage","class","method","extendedType","Injectable","providedIn","FormlyFormBuilder","formlyConfig","buildForm","fieldGroup","fieldTransforms","_buildForm","_checkField","root","formId","index","getExtensions","prePopulate","initFieldOptions","onPopulate","initFieldValidation","initFieldAsyncValidation","paths_1","rootForm_1","rootModel_1","_a","formPath","addFormControl","nestedForm","get","addControl","postPopulate","defineProperty","configurable","id","getFieldId","template","join","templateOptions","modelOptions","lifecycle","label","placeholder","focus","console","warn","defaultValue","fieldArray","initFieldWrappers","initFieldArray","splice","f","control","abstractControlOptions","_validators","asyncValidators","_asyncValidators","updateOn","FormControl","patchValue","setValidators","setAsyncValidators","updateValueAndValidity","createControl","disabled","disable","enabled","set","enable","enumerable","at","setControl","initPredefinedFieldValidation","validatorName","validator_1","errorPath_1","message_1","errorPath","expression","isValid","errors","setErrors","_b","wrapNgValidatorFn","validator_2","Promise","resolve","then","result","filter","opt","expressionProperties","Validators","required","pattern","minLength","maxLength","min","max","fieldTemplateManipulators","templateManipulators","tslib_1.__spread","el","a","FormlyForm","formlyBuilder","parentFormGroup","parentFormlyForm","EventEmitter","modelChange","pipe","debounceTime","enableCheckExprDebounce","tap","checkExpressionChange","subscribe","ngDoCheck","ngOnChanges","changes","fields","isRoot","setOptions","clearModelSubscriptions","trackModelChanges","updateInitialValue","ngOnDestroy","checkExpressionChange$","unsubscribe","changeModel","event","emit","formState","fieldChanges","Subject","resetModel","initialModel","resetForm","reset","rootKey","valueChanges","debounce","default","parsers","parserFn","modelChangeSubs","sub","Component","selector","NgForm","decorators","Optional","FormGroupDirective","SkipSelf","Input","Output","FormlyField","ngAfterContentInit","lifeCycleHooks","afterContentInit","ngAfterContentChecked","afterContentChecked","ngAfterViewInit","afterViewInit","ngAfterViewChecked","afterViewChecked","doCheck","ngOnInit","onInit","renderField","containerRef","onChanges","componentRefs","ref","instance","onDestroy","componentRef","destroy","wrapperName","createComponent","resolveComponentFactory","fieldComponent","callback","host","[style.display]","ViewChild","read","ViewContainerRef","FormlyAttributes","renderer","elementRef","onFocus","$event","to","onBlur","blur","setAttribute","nativeElement","attributes","setAttributes","previousValue","currentValue","removeAttribute","Directive","[attr.name]","[attr.placeholder]","[attr.tabindex]","[attr.readonly]","[attr.step]","(keyup)","(keydown)","(click)","(change)","(keypress)","Renderer2","ElementRef","HostListener","FieldType","Field","_super","tslib_1.__extends","FieldArrayType","builder","add","remove","FieldWrapper","FormlyValidationMessage","fieldForm","evalExpression","thisArg","argVal","Function","FieldExpressionExtension","_expressionProperties","expressionProperty","expressionValueSetter","evalExpressionValueSetter","argNames","this_1","_evalExpression","subscription_1","onDestroy_1","hideExpression","hide","parentExpression","evalStringExpression","checkFieldExpressionChange","checkFieldVisibilityChange","expressionValue","JSON","stringify","emitEvent","hideExpressionResult","hidden","parent_1","fieldParentFormControl","fieldKey","addFieldControl","fieldModel","pop","defaultFormlyConfig","FormlyGroup","FormlyTemplateType","FormlyModule","configService","configs","forRoot","ngModule","providers","provide","multi","useFactory","useValue","ANALYZE_FOR_ENTRY_COMPONENTS","forChild","NgModule","declarations","entryComponents","exports","imports","CommonModule","ComponentFactoryResolver","Inject"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { FormlyFieldConfig } from './core';\nimport { Observable } from 'rxjs';\nimport { AbstractControl, FormArray, FormGroup } from '@angular/forms';\n\nexport function getFieldId(formId: string, field: FormlyFieldConfig, index: string|number) {\n  if (field.id) return field.id;\n  let type = field.type;\n  if (!type && field.template) type = 'template';\n  return [formId, type, field.key, index].join('_');\n}\n\nexport function getKeyPath(field: {key?: string|string[], fieldGroup?: any, fieldArray?: any}): (string|number)[] {\n  /* We store the keyPath in the field for performance reasons. This function will be called frequently. */\n  if (!(<any> field)['_formlyKeyPath'] || (<any> field)['_formlyKeyPath'].key !== field.key) {\n    let keyPath: (string|number)[] = [];\n    if (field.key) {\n      /* Also allow for an array key, hence the type check  */\n      let pathElements = typeof field.key === 'string' ? field.key.split('.') : field.key;\n      for (let pathElement of pathElements) {\n        if (typeof pathElement === 'string') {\n          /* replace paths of the form names[2] by names.2, cfr. angular formly */\n          pathElement = pathElement.replace(/\\[(\\w+)\\]/g, '.$1');\n          keyPath = keyPath.concat(pathElement.split('.'));\n        } else {\n          keyPath.push(pathElement);\n        }\n      }\n      for (let i = 0; i < keyPath.length; i++) {\n        let pathElement = keyPath[i];\n        if (typeof pathElement === 'string' && /^\\d+$/.test(pathElement))  {\n          keyPath[i] = parseInt(pathElement);\n        }\n      }\n    }\n    (<any> field)['_formlyKeyPath'] = {\n      key: field.key,\n      path: keyPath,\n    };\n  }\n\n  return (<any> field)['_formlyKeyPath'].path.slice(0);\n}\n\nexport const FORMLY_VALIDATORS = ['required', 'pattern', 'minLength', 'maxLength', 'min', 'max'];\n\nexport function assignModelValue(model: any, path: string | (string | number)[], value: any) {\n  if (typeof path === 'string') {\n    path = getKeyPath({key: path});\n  }\n\n  if (path.length > 1) {\n    const e = path.shift();\n    if (!model[e] || !isObject(model[e])) {\n      model[e] = typeof path[0] === 'string' ? {} : [];\n    }\n    assignModelValue(model[e], path, value);\n  } else {\n    model[path[0]] = value;\n  }\n}\n\nexport function getFieldValue(field: FormlyFieldConfig): any {\n  const paths = getKeyPath(field);\n  let model = field.parent.model;\n  while (model && paths.length > 0) {\n    const e = paths.shift();\n    model = model[e];\n  }\n\n  return model;\n}\n\nexport function getKey(controlKey: string, actualKey: string) {\n  return actualKey ? actualKey + '.' + controlKey : controlKey;\n}\n\nexport function reverseDeepMerge(dest: any, ...args: any[]) {\n  args.forEach(src => {\n    for (let srcArg in src) {\n      if (isNullOrUndefined(dest[srcArg]) || isBlankString(dest[srcArg])) {\n        if (isFunction(src[srcArg])) {\n          dest[srcArg] = src[srcArg];\n        } else {\n          dest[srcArg] = clone(src[srcArg]);\n        }\n      } else if (objAndSameType(dest[srcArg], src[srcArg])) {\n        reverseDeepMerge(dest[srcArg], src[srcArg]);\n      }\n    }\n  });\n  return dest;\n}\n\nexport function isNullOrUndefined(value: any) {\n  return value === undefined || value === null;\n}\n\nexport function isUndefined(value: any) {\n  return value === undefined;\n}\n\nexport function isBlankString(value: any) {\n  return value === '';\n}\n\nexport function isFunction(value: any) {\n  return typeof(value) === 'function';\n}\n\nexport function objAndSameType(obj1: any, obj2: any) {\n  return isObject(obj1) && isObject(obj2)\n    && Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2)\n    && !(Array.isArray(obj1) || Array.isArray(obj2));\n}\n\nexport function isObject(x: any) {\n  return x != null && typeof x === 'object';\n}\n\nexport function clone(value: any): any {\n  if (!isObject(value) || value instanceof RegExp || value instanceof Observable) {\n    return value;\n  }\n\n  if (value instanceof AbstractControl) {\n    return null;\n  }\n\n  if (Object.prototype.toString.call(value) === '[object Date]') {\n    return new Date(value.getTime());\n  }\n\n  if (Array.isArray(value)) {\n    return value.slice(0).map(v => clone(v));\n  }\n\n  value = Object.assign({}, value);\n  Object.keys(value).forEach(k => value[k] = clone(value[k]));\n\n  return value;\n}\n\nexport function removeFieldControl(form: FormArray | FormGroup, key: string | number) {\n  if (form instanceof FormArray) {\n    form.removeAt(key as number);\n  } else if (form instanceof FormGroup) {\n    form.removeControl(`${key}`);\n  }\n}\n","import { Injectable, InjectionToken, ComponentFactoryResolver } from '@angular/core';\nimport { ValidationErrors, FormGroup, FormArray, AbstractControl } from '@angular/forms';\nimport { FieldType } from './../templates/field.type';\nimport { reverseDeepMerge } from './../utils';\nimport { FormlyFieldConfig, FormlyFormOptions } from '../components/formly.field.config';\n\nexport const FORMLY_CONFIG = new InjectionToken<FormlyConfig>('FORMLY_CONFIG');\n\n/** @experimental */\nexport interface FormlyExtension {\n  prePopulate?(field: FormlyFieldConfig): void;\n  onPopulate?(field: FormlyFieldConfig): void;\n  postPopulate?(field: FormlyFieldConfig): void;\n}\n\n/**\n * Maintains list of formly field directive types. This can be used to register new field templates.\n */\n@Injectable({ providedIn: 'root' })\nexport class FormlyConfig {\n  types: {[name: string]: TypeOption} = {};\n  validators: { [name: string]: ValidatorOption } = {};\n  wrappers: { [name: string]: WrapperOption } = {};\n  messages: { [name: string]: string | ((error: any, field: FormlyFieldConfig) => string); } = {};\n  templateManipulators: {\n    preWrapper: ManipulatorWrapper[];\n    postWrapper: ManipulatorWrapper[];\n  } = {\n    preWrapper: [],\n    postWrapper: [],\n  };\n  extras: {\n    fieldTransform?: ((fields: FormlyFieldConfig[], model: any, form: FormGroup | FormArray, options: FormlyFormOptions) => FormlyFieldConfig[])[],\n    showError?: (field: FieldType) => boolean;\n  } = {\n    fieldTransform: undefined,\n    showError: function(field: FieldType) {\n      return field.formControl && field.formControl.invalid && (field.formControl.touched || (field.options.parentForm && field.options.parentForm.submitted) || (field.field.validation && field.field.validation.show));\n    },\n  };\n  extensions: { [name: string]: FormlyExtension } = {};\n\n  addConfig(config: ConfigOption) {\n    if (config.types) {\n      config.types.forEach(type => this.setType(type));\n    }\n    if (config.validators) {\n      config.validators.forEach(validator => this.setValidator(validator));\n    }\n    if (config.wrappers) {\n      config.wrappers.forEach(wrapper => this.setWrapper(wrapper));\n    }\n    if (config.manipulators) {\n      config.manipulators.forEach(manipulator => this.setManipulator(manipulator));\n    }\n    if (config.validationMessages) {\n      config.validationMessages.forEach(validation => this.addValidatorMessage(validation.name, validation.message));\n    }\n    if (config.extensions) {\n      config.extensions.forEach(c => this.extensions[c.name] = c.extension);\n    }\n    if (config.extras) {\n      this.extras = { ...this.extras, ...config.extras };\n    }\n  }\n\n  setType(options: TypeOption | TypeOption[]) {\n    if (Array.isArray(options)) {\n      options.forEach((option) => this.setType(option));\n    } else {\n      if (!this.types[options.name]) {\n        this.types[options.name] = <TypeOption>{};\n      }\n      this.types[options.name].component = options.component;\n      this.types[options.name].name = options.name;\n      this.types[options.name].extends = options.extends;\n      this.types[options.name].defaultOptions = options.defaultOptions;\n      this.types[options.name].componentFactoryResolver = options.componentFactoryResolver;\n      if (options.wrappers) {\n        options.wrappers.forEach((wrapper) => this.setTypeWrapper(options.name, wrapper));\n      }\n    }\n  }\n\n  getType(name: string): TypeOption {\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n\n    return this.types[name];\n  }\n\n  getMergedField(field: FormlyFieldConfig = {}): any {\n    let name = field.type;\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n    if (this.types[name].defaultOptions) {\n      reverseDeepMerge(field, this.types[name].defaultOptions);\n    }\n\n    let extendDefaults = this.types[name].extends && this.getType(this.types[name].extends).defaultOptions;\n    if (extendDefaults) {\n      reverseDeepMerge(field, extendDefaults);\n    }\n\n    if (field && field.optionsTypes) {\n      field.optionsTypes.forEach(option => {\n        let defaultOptions = this.getType(option).defaultOptions;\n        if (defaultOptions) {\n          reverseDeepMerge(field, defaultOptions);\n        }\n      });\n    }\n\n    (<any> field).component = this.types[name].component;\n\n    if (!field.wrappers && this.types[name].wrappers) {\n      field.wrappers = [...this.types[name].wrappers];\n    }\n  }\n\n  setWrapper(options: WrapperOption) {\n    this.wrappers[options.name] = options;\n    if (options.types) {\n      options.types.forEach((type) => {\n        this.setTypeWrapper(type, options.name);\n      });\n    }\n  }\n\n  getWrapper(name: string): WrapperOption {\n    if (!this.wrappers[name]) {\n      throw new Error(`[Formly Error] There is no wrapper by the name of \"${name}\"`);\n    }\n\n    return this.wrappers[name];\n  }\n\n  setTypeWrapper(type: string, name: string) {\n    if (!this.types[type]) {\n      this.types[type] = <TypeOption>{};\n    }\n    if (!this.types[type].wrappers) {\n      this.types[type].wrappers = <[string]>[];\n    }\n    if (this.types[type].wrappers.indexOf(name) === -1) {\n      this.types[type].wrappers.push(name);\n    }\n  }\n\n  setValidator(options: ValidatorOption) {\n    this.validators[options.name] = options;\n  }\n\n  getValidator(name: string): ValidatorOption {\n    if (!this.validators[name]) {\n      throw new Error(`[Formly Error] There is no validator by the name of \"${name}\"`);\n    }\n\n    return this.validators[name];\n  }\n\n  addValidatorMessage(name: string, message: string | ((error: any, field: FormlyFieldConfig) => string)) {\n    this.messages[name] = message;\n  }\n\n  getValidatorMessage(name: string) {\n    return this.messages[name];\n  }\n\n  setManipulator(manipulator: ManipulatorOption) {\n    new manipulator.class()[manipulator.method](this);\n  }\n\n  private mergeExtendedType(name: string) {\n    if (!this.types[name].extends) {\n      return;\n    }\n\n    const extendedType = this.getType(this.types[name].extends);\n    if (!this.types[name].component) {\n      this.types[name].component = extendedType.component;\n    }\n\n    if (!this.types[name].wrappers) {\n      this.types[name].wrappers = extendedType.wrappers;\n    }\n  }\n}\nexport interface TypeOption {\n  name: string;\n  component?: any;\n  wrappers?: string[];\n  extends?: string;\n  defaultOptions?: FormlyFieldConfig;\n  componentFactoryResolver?: ComponentFactoryResolver;\n}\n\nexport interface WrapperOption {\n  name: string;\n  component: any;\n  types?: string[];\n  componentFactoryResolver?: ComponentFactoryResolver;\n}\n\nexport interface FieldValidatorFn {\n  (c: AbstractControl, field: FormlyFieldConfig): ValidationErrors | null;\n}\n\nexport interface ValidatorOption {\n  name: string;\n  validation: FieldValidatorFn;\n}\n\nexport interface ExtensionOption {\n  name: string;\n  extension: FormlyExtension;\n}\n\nexport interface ValidationMessageOption {\n  name: string;\n  message: string | ((error: any, field: FormlyFieldConfig) => string);\n}\n\nexport interface ManipulatorOption {\n  class?: { new (): any };\n  method?: string;\n}\n\nexport interface ManipulatorWrapper {\n  (f: FormlyFieldConfig): string;\n}\n\nexport interface TemplateManipulators {\n  preWrapper?: ManipulatorWrapper[];\n  postWrapper?: ManipulatorWrapper[];\n}\n\nexport interface ConfigOption {\n  types?: TypeOption[];\n  wrappers?: WrapperOption[];\n  validators?: ValidatorOption[];\n  extensions?: ExtensionOption[];\n  validationMessages?: ValidationMessageOption[];\n  manipulators?: ManipulatorOption[];\n  extras?: {\n    fieldTransform?: any,\n    showError?: (field: FieldType) => boolean;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { FormGroup, FormArray, FormControl, AbstractControl, Validators, AbstractControlOptions } from '@angular/forms';\nimport { FormlyConfig, FieldValidatorFn, TemplateManipulators } from './formly.config';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyFieldConfigCache, FormlyFormOptionsCache } from '../components/formly.field.config';\nimport { FORMLY_VALIDATORS, getFieldId, isObject, isNullOrUndefined, getKeyPath, assignModelValue, isUndefined, clone, removeFieldControl, getFieldValue } from '../utils';\n\n@Injectable({ providedIn: 'root' })\nexport class FormlyFormBuilder {\n  private formId = 0;\n\n  constructor(private formlyConfig: FormlyConfig) {}\n\n  buildForm(formControl: FormGroup | FormArray, fieldGroup: FormlyFieldConfig[] = [], model: any, options: FormlyFormOptions) {\n    const fieldTransforms = (options && options.fieldTransform) || this.formlyConfig.extras.fieldTransform;\n    (Array.isArray(fieldTransforms) ? fieldTransforms : [fieldTransforms]).forEach(fieldTransform => {\n      if (fieldTransform) {\n        fieldGroup = fieldTransform(fieldGroup, model, formControl, options);\n        if (!fieldGroup) {\n          throw new Error('fieldTransform must return an array of fields');\n        }\n      }\n    });\n\n    this._buildForm({ fieldGroup, model, formControl, options });\n    if ((<FormlyFormOptionsCache>options)._checkField) {\n      (<FormlyFormOptionsCache> options)._checkField({ fieldGroup, model, formControl, options });\n    }\n  }\n\n  private _buildForm(root: FormlyFieldConfigCache) {\n    this.formId++;\n    root.fieldGroup.forEach((field, index) => {\n      this.getExtensions().forEach(extension => extension.prePopulate && extension.prePopulate(field));\n      this.initFieldOptions(root, field, index);\n      this.getExtensions().forEach(extension => extension.onPopulate && extension.onPopulate(field));\n      this.initFieldValidation(field);\n      this.initFieldAsyncValidation(field);\n      if (field.key && field.type) {\n        const paths = getKeyPath({ key: field.key });\n        let rootForm = root.formControl as FormGroup, rootModel = field.fieldGroup ? { [paths[0]]: field.model } : field.model;\n        paths.forEach((path, index) => {\n          // FormGroup/FormArray only allow string value for path\n          const formPath = path.toString();\n          // is last item\n          if (index === paths.length - 1) {\n            this.addFormControl(rootForm, field, rootModel, formPath);\n\n          } else {\n            let nestedForm = rootForm.get(formPath) as FormGroup;\n            if (!nestedForm) {\n              nestedForm = new FormGroup({});\n              this.addControl(rootForm, formPath, nestedForm);\n            }\n            if (!rootModel[path]) {\n              rootModel[path] = typeof path === 'string' ? {} : [];\n            }\n\n            rootForm = nestedForm;\n            rootModel = rootModel[path];\n          }\n        });\n      } else if (!field.key && field.fieldGroup) {\n        field.formControl = root.formControl;\n      }\n\n      if (field.fieldGroup) {\n        this._buildForm(field);\n      }\n      this.getExtensions().forEach(extension => extension.postPopulate && extension.postPopulate(field));\n    });\n  }\n\n  private getExtensions() {\n    return Object.keys(this.formlyConfig.extensions).map(name => this.formlyConfig.extensions[name]);\n  }\n\n  private initFieldOptions(root: FormlyFieldConfigCache, field: FormlyFieldConfig, index: number) {\n    Object.defineProperty(field, 'options', { get: () => root.options, configurable: true });\n    Object.defineProperty(field, 'parent', { get: () => root, configurable: true });\n    Object.defineProperty(field, 'model', {\n      get: () => field.key && field.fieldGroup ? getFieldValue(field) : root.model,\n      configurable: true,\n    });\n\n    field.id = getFieldId(`formly_${this.formId}`, field, index);\n    field.templateOptions = field.templateOptions || {};\n    field.modelOptions = field.modelOptions || {};\n    field.lifecycle = field.lifecycle || {};\n    if (field.type && field.key) {\n      field.templateOptions = Object.assign({\n        label: '',\n        placeholder: '',\n        focus: false,\n      }, field.templateOptions);\n    }\n\n    if (field.template && field.type !== 'formly-template') {\n      if (field.type) {\n        console.warn(`NgxFormly: passing 'type' property is not allowed when 'template' is set.`);\n      }\n      field.type = 'formly-template';\n    }\n\n    if (field.type) {\n      this.formlyConfig.getMergedField(field);\n    }\n    if (field.key && isUndefined(field.defaultValue) && (field.fieldGroup || field.fieldArray)) {\n      field.defaultValue = field.fieldArray ? [] : {};\n    }\n\n    if (!isUndefined(field.defaultValue) && isUndefined(getFieldValue(field))) {\n      assignModelValue(root.model, field.key, field.defaultValue);\n    }\n\n    this.initFieldWrappers(field);\n    if (field.fieldArray) {\n      this.initFieldArray(field);\n    }\n\n    if (!field.type && field.fieldGroup) {\n      field.type = 'formly-group';\n    }\n  }\n\n  private initFieldArray(field: FormlyFieldConfigCache) {\n    field.fieldGroup = field.fieldGroup || [];\n    if (field.fieldGroup.length > field.model.length) {\n      for (let i = field.fieldGroup.length; i >= field.model.length; --i) {\n        removeFieldControl(field.formControl as FormArray, i);\n        field.fieldGroup.splice(i, 1);\n      }\n    }\n\n    for (let i = field.fieldGroup.length; i < field.model.length; i++) {\n      const f = { ...clone(field.fieldArray), key: `${i}` };\n      field.fieldGroup.push(f);\n    }\n  }\n\n  private addFormControl(form: FormGroup | FormArray, field: FormlyFieldConfigCache, model: any, path: string) {\n    const abstractControlOptions = {\n      validators: field._validators,\n      asyncValidators: field._asyncValidators,\n      updateOn: field.modelOptions.updateOn,\n    } as AbstractControlOptions;\n    let control: AbstractControl;\n\n    if (field.formControl instanceof AbstractControl || form.get(path)) {\n      control = field.formControl || form.get(path);\n      if (\n        !(isNullOrUndefined(control.value) && isNullOrUndefined(model[path]))\n        && control.value !== model[path]\n        && control instanceof FormControl\n      ) {\n        control.patchValue(model[path]);\n      }\n\n      if (abstractControlOptions.validators || abstractControlOptions.asyncValidators) {\n        if (abstractControlOptions.validators) {\n          control.setValidators(abstractControlOptions.validators);\n        }\n        if (abstractControlOptions.asyncValidators) {\n          control.setAsyncValidators(abstractControlOptions.asyncValidators);\n        }\n        control.updateValueAndValidity();\n      }\n    } else if ((<any>field).component && (<any>field).component.createControl) {\n      control = (<any>field).component.createControl(model[path], field);\n    } else if (field.fieldGroup && !field.fieldArray) {\n      control = new FormGroup({}, abstractControlOptions);\n    } else if (field.fieldArray) {\n      control = new FormArray([], abstractControlOptions);\n    } else {\n      control = new FormControl(model[path], abstractControlOptions);\n    }\n\n    if (field.templateOptions.disabled) {\n      control.disable();\n    }\n\n    // Replace decorated property with a getter that returns the observable.\n    // https://github.com/angular-redux/store/blob/master/src/decorators/select.ts#L79-L85\n    if (delete field.templateOptions.disabled) {\n      Object.defineProperty(field.templateOptions, 'disabled', {\n        get: () => !field.formControl.enabled,\n        set: (value: boolean) => value ? field.formControl.disable() : field.formControl.enable(),\n        enumerable: true,\n        configurable: true,\n      });\n    }\n\n    this.addControl(form, path, control, field);\n  }\n\n  private addControl(form: FormGroup | FormArray, key: string | number, formControl: AbstractControl, field?: FormlyFieldConfig) {\n    if (field) {\n      field.formControl = formControl;\n    }\n\n    if (form instanceof FormArray) {\n      if (form.at(<number> key) !== formControl) {\n        form.setControl(<number>key, formControl);\n      }\n    } else {\n      if (form.get(<string> key) !== formControl) {\n        form.setControl(<string>key, formControl);\n      }\n    }\n  }\n\n  private initFieldValidation(field: FormlyFieldConfigCache) {\n    if (field._validators) {\n      return;\n    }\n\n    field._validators = [];\n    this.initPredefinedFieldValidation(field);\n    if (field.validators) {\n      for (const validatorName in field.validators) {\n        if (validatorName !== 'validation') {\n          let validator = field.validators[validatorName];\n          let errorPath;\n          let message;\n          if (isObject(validator)) {\n            errorPath = validator.errorPath;\n            message = validator.message;\n            validator = validator.expression;\n          }\n\n          field._validators.push((control: AbstractControl) => {\n            const isValid = validator(control, field);\n            if (errorPath && field.formControl && field.formControl.get(errorPath)) {\n              if (!isValid) {\n                field.formControl.get(errorPath).setErrors({\n                  ...(field.formControl.get(errorPath).errors || {}),\n                  [validatorName]: { message },\n                });\n              } else {\n                const errors = (field.formControl.get(errorPath).errors || {});\n                delete errors[validatorName];\n                field.formControl.get(errorPath).setErrors(Object.keys(errors).length === 0 ? null : errors);\n              }\n            }\n\n            return isValid ? null : { [validatorName]: errorPath ? { errorPath } : true };\n          });\n        } else {\n          if (!Array.isArray(field.validators.validation)) {\n            field.validators.validation = [field.validators.validation];\n          }\n          field.validators.validation\n            .forEach((validator: any) => field._validators.push(this.wrapNgValidatorFn(field, validator)));\n        }\n      }\n    }\n  }\n\n  private initFieldAsyncValidation(field: FormlyFieldConfigCache) {\n    if (field._asyncValidators) {\n      return;\n    }\n\n    field._asyncValidators = [];\n    if (field.asyncValidators) {\n      for (const validatorName in field.asyncValidators) {\n        if (validatorName !== 'validation') {\n          let validator = field.asyncValidators[validatorName];\n          if (isObject(validator)) {\n            validator = validator.expression;\n          }\n\n          field._asyncValidators.push((control: FormControl) => new Promise((resolve) => {\n            return validator(control, field).then((result: boolean) => {\n              resolve(result ? null : { [validatorName]: true });\n            });\n          }));\n        } else {\n          if (!Array.isArray(field.asyncValidators.validation)) {\n            field.asyncValidators.validation = [field.asyncValidators.validation];\n          }\n          field.asyncValidators.validation\n            .forEach((validator: any) => field._asyncValidators.push(this.wrapNgValidatorFn(field, validator) as any));\n        }\n      }\n    }\n  }\n\n  private initPredefinedFieldValidation(field: FormlyFieldConfigCache) {\n    FORMLY_VALIDATORS\n      .filter(opt => field.templateOptions.hasOwnProperty(opt) || (field.expressionProperties && field.expressionProperties[`templateOptions.${opt}`]))\n      .forEach((opt) => {\n        field._validators.push((control: AbstractControl) => {\n          const value = field.templateOptions[opt];\n          if (value === false) {\n            return null;\n          }\n          switch (opt) {\n            case 'required':\n              return Validators.required(control);\n            case 'pattern':\n              return Validators.pattern(value)(control);\n            case 'minLength':\n              return Validators.minLength(value)(control);\n            case 'maxLength':\n              return Validators.maxLength(value)(control);\n            case 'min':\n              return Validators.min(value)(control);\n            case 'max':\n              return Validators.max(value)(control);\n          }\n        });\n      });\n  }\n\n  private wrapNgValidatorFn(field: FormlyFieldConfig, validator: string | FieldValidatorFn) {\n    validator = typeof validator === 'string'\n    ? this.formlyConfig.getValidator(validator).validation\n    : validator;\n\n    return (control: AbstractControl) => (validator as FieldValidatorFn)(control, field);\n  }\n\n  private initFieldWrappers(field: FormlyFieldConfig) {\n    field.wrappers = field.wrappers || [];\n    const fieldTemplateManipulators: TemplateManipulators = {\n      preWrapper: [],\n      postWrapper: [],\n      ...(field.templateOptions.templateManipulators || {}),\n    };\n\n    field.wrappers = [\n      ...this.formlyConfig.templateManipulators.preWrapper.map(m => m(field)),\n      ...fieldTemplateManipulators.preWrapper.map(m => m(field)),\n      ...field.wrappers,\n      ...this.formlyConfig.templateManipulators.postWrapper.map(m => m(field)),\n      ...fieldTemplateManipulators.postWrapper.map(m => m(field)),\n    ].filter((el, i, a) => el && i === a.indexOf(el));\n  }\n}\n","import { Component, DoCheck, OnChanges, Input, SimpleChanges, Optional, EventEmitter, Output, SkipSelf, OnDestroy } from '@angular/core';\nimport { FormGroup, FormArray, NgForm, FormGroupDirective } from '@angular/forms';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyValueChangeEvent, FormlyFormOptionsCache } from './formly.field.config';\nimport { FormlyFormBuilder } from '../services/formly.form.builder';\nimport { FormlyConfig } from '../services/formly.config';\nimport { assignModelValue, isNullOrUndefined, reverseDeepMerge } from '../utils';\nimport { Subject, Subscription } from 'rxjs';\nimport { debounceTime, map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'formly-form',\n  template: `\n    <formly-field *ngFor=\"let field of fields\"\n      [form]=\"form\"\n      [field]=\"field\"\n      [ngClass]=\"field.className\"\n      [options]=\"options\">\n    </formly-field>\n    <ng-content></ng-content>\n  `,\n})\nexport class FormlyForm implements DoCheck, OnChanges, OnDestroy {\n  @Input() model: any = {};\n  @Input() form: FormGroup | FormArray = new FormGroup({});\n  @Input() fields: FormlyFieldConfig[] = [];\n  @Input() options: FormlyFormOptions;\n  @Output() modelChange = new EventEmitter<any>();\n\n  /** @internal */\n  @Input() isRoot = true;\n\n  private initialModel: any;\n  private modelChangeSubs: Subscription[] = [];\n\n  private enableCheckExprDebounce = false;\n  private checkExpressionChange$ = this.modelChange.pipe(\n    debounceTime(this.enableCheckExprDebounce ? 100 : 0),\n    tap(() => {\n      this.enableCheckExprDebounce = true;\n      this.checkExpressionChange();\n      this.enableCheckExprDebounce = false;\n    }),\n  ).subscribe();\n\n  constructor(\n    private formlyBuilder: FormlyFormBuilder,\n    private formlyConfig: FormlyConfig,\n    @Optional() private parentForm: NgForm,\n    @Optional() private parentFormGroup: FormGroupDirective,\n    @Optional() @SkipSelf() private parentFormlyForm: FormlyForm,\n  ) {}\n\n  ngDoCheck() {\n    this.checkExpressionChange();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this.fields || this.fields.length === 0 || !this.isRoot) {\n      return;\n    }\n\n    if (changes.fields || changes.form || changes.model) {\n      this.model = this.model || {};\n      this.form = this.form || (new FormGroup({}));\n      this.setOptions();\n      this.clearModelSubscriptions();\n      this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);\n      this.trackModelChanges(this.fields);\n      this.options.updateInitialValue();\n    }\n  }\n\n  ngOnDestroy() {\n    this.clearModelSubscriptions();\n    this.checkExpressionChange$.unsubscribe();\n  }\n\n  changeModel(event: { key: string, value: any }) {\n    assignModelValue(this.model, event.key, event.value);\n    this.modelChange.emit(this.model);\n  }\n\n  setOptions() {\n    this.options = this.options || {};\n\n    this.options.formState = this.options.formState || {};\n    if (!this.options.showError) {\n      this.options.showError = this.formlyConfig.extras.showError;\n    }\n    if (!this.options.fieldChanges) {\n      this.options.fieldChanges = new Subject<FormlyValueChangeEvent>();\n    }\n\n    if (!this.options.resetModel) {\n      this.options.resetModel = (model ?: any) => {\n        model = isNullOrUndefined(model) ? this.initialModel : model;\n        if (this.model) {\n          Object.keys(this.model).forEach(k => delete this.model[k]);\n          Object.assign(this.model, model || {});\n        }\n\n        this.clearModelSubscriptions();\n        this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);\n        this.trackModelChanges(this.fields);\n\n        // we should call `NgForm::resetForm` to ensure changing `submitted` state after resetting form\n        // but only when the current component is a root one.\n        if (!this.parentFormlyForm && this.options.parentForm && this.options.parentForm.control === this.form) {\n          this.options.parentForm.resetForm(model);\n        } else {\n          this.form.reset(model);\n        }\n      };\n    }\n\n    if (!this.options.parentForm) {\n      this.options.parentForm = this.parentFormGroup || this.parentForm;\n    }\n\n    if (!this.options.updateInitialValue) {\n      this.options.updateInitialValue = () => this.initialModel = reverseDeepMerge({}, this.model);\n    }\n\n    if (!(<FormlyFormOptionsCache> this.options)._buildForm) {\n      (<FormlyFormOptionsCache> this.options)._buildForm = () => {\n        this.clearModelSubscriptions();\n        this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);\n        this.trackModelChanges(this.fields);\n      };\n    }\n  }\n\n  private checkExpressionChange() {\n    if (this.isRoot && (<FormlyFormOptionsCache> this.options)._checkField) {\n      (<FormlyFormOptionsCache> this.options)._checkField({ fieldGroup: this.fields, model: this.model, formControl: this.form, options: this.options });\n    }\n  }\n\n  private trackModelChanges(fields: FormlyFieldConfig[], rootKey: string[] = []) {\n    fields.forEach(field => {\n      if (field.key && field.type && !field.fieldGroup) {\n        const valueChanges = field.formControl.valueChanges.pipe(\n          field.modelOptions.debounce && field.modelOptions.debounce.default\n          ? debounceTime(field.modelOptions.debounce.default)\n          : tap(() => {}),\n          map(value => {\n            if (field.parsers && field.parsers.length > 0) {\n              field.parsers.forEach(parserFn => value = parserFn(value));\n            }\n\n            return value;\n          }),\n          tap(value => this.changeModel({ key: [...rootKey, field.key].join('.'), value })),\n        );\n\n        this.modelChangeSubs.push(valueChanges.subscribe());\n      }\n\n      if (field.fieldGroup && field.fieldGroup.length > 0) {\n        this.trackModelChanges(field.fieldGroup, field.key ? [...rootKey, field.key] : rootKey);\n      }\n    });\n  }\n\n  private clearModelSubscriptions() {\n    this.modelChangeSubs.forEach(sub => sub.unsubscribe());\n    this.modelChangeSubs = [];\n  }\n}\n","import {\n  Component, OnInit, OnChanges, EventEmitter, Input, Output, OnDestroy,\n  ViewContainerRef, ViewChild, ComponentRef, SimpleChanges, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormlyConfig } from '../services/formly.config';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyLifeCycleFn, FormlyLifeCycleOptions } from './formly.field.config';\nimport { FieldWrapper } from '../templates/field.wrapper';\n\n@Component({\n  selector: 'formly-field',\n  template: `<ng-template #container></ng-template>`,\n  host: {\n    '[style.display]': 'field.hide ? \"none\":\"\"',\n  },\n})\nexport class FormlyField implements OnInit, OnChanges, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked, OnDestroy {\n  @Input() set model(m: any) {\n    console.warn(`NgxFormly: passing 'model' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);\n  }\n\n  @Input() form: FormGroup;\n  @Input() field: FormlyFieldConfig;\n  @Input() options: FormlyFormOptions = {};\n  @Output() modelChange: EventEmitter<any> = new EventEmitter();\n  @ViewChild('container', {read: ViewContainerRef}) containerRef: ViewContainerRef;\n\n  private componentRefs: ComponentRef<FieldWrapper>[] = [];\n\n  constructor(private formlyConfig: FormlyConfig) {}\n\n  ngAfterContentInit() {\n    this.lifeCycleHooks(this.lifecycle.afterContentInit);\n  }\n\n  ngAfterContentChecked() {\n    this.lifeCycleHooks(this.lifecycle.afterContentChecked);\n  }\n\n  ngAfterViewInit() {\n    this.lifeCycleHooks(this.lifecycle.afterViewInit);\n  }\n\n  ngAfterViewChecked() {\n    this.lifeCycleHooks(this.lifecycle.afterViewChecked);\n  }\n\n  ngDoCheck() {\n    this.lifeCycleHooks(this.lifecycle.doCheck);\n  }\n\n  ngOnInit() {\n    this.lifeCycleHooks(this.lifecycle.onInit);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.field) {\n      this.renderField(this.field, this.containerRef);\n    }\n\n    this.lifeCycleHooks(this.lifecycle.onChanges);\n    this.componentRefs.forEach(ref => {\n      Object.assign(ref.instance, {\n        form: this.form,\n        field: this.field,\n        options: this.options,\n      });\n    });\n  }\n\n  ngOnDestroy() {\n    this.lifeCycleHooks(this.lifecycle.onDestroy);\n    this.componentRefs.forEach(componentRef => componentRef.destroy());\n    this.componentRefs = [];\n  }\n\n  private renderField(field: FormlyFieldConfig, containerRef: ViewContainerRef) {\n    this.componentRefs.forEach(componentRef => componentRef.destroy());\n    this.componentRefs = [];\n\n    const wrappers = <any>(field.wrappers || []).map(wrapperName => this.formlyConfig.getWrapper(wrapperName));\n    [...wrappers, this.formlyConfig.getType(field.type)].forEach(({ componentFactoryResolver, component }) => {\n      const ref = containerRef.createComponent<FieldWrapper>(componentFactoryResolver.resolveComponentFactory(component));\n\n      Object.assign(ref.instance, { form: this.form, options: this.options, field });\n      this.componentRefs.push(ref);\n      containerRef = ref.instance.fieldComponent;\n    });\n  }\n\n  private get lifecycle(): FormlyLifeCycleOptions {\n    return this.field.lifecycle || {};\n  }\n\n  private lifeCycleHooks(callback: FormlyLifeCycleFn) {\n    if (callback) {\n      callback(this.form, this.field, this.field.model, this.options);\n    }\n  }\n}\n","import { Directive, HostListener, ElementRef, Input, OnChanges, SimpleChanges, Renderer2 } from '@angular/core';\nimport { FormlyFieldConfig, FormlyTemplateOptions } from './formly.field.config';\n\n@Directive({\n  selector: '[formlyAttributes]',\n  host: {\n    '[attr.name]': 'field.name',\n    '[attr.placeholder]': 'to.placeholder',\n    '[attr.tabindex]': 'to.tabindex',\n    '[attr.readonly]': 'to.readonly',\n    '[attr.step]': 'to.step',\n\n    '(keyup)': 'to.keyup && to.keyup(field, $event)',\n    '(keydown)': 'to.keydown && to.keydown(field, $event)',\n    '(click)': 'to.click && to.click(field, $event)',\n    '(change)': 'to.change && to.change(field, $event)',\n    '(keypress)': 'to.keypress && to.keypress(field, $event)',\n  },\n})\nexport class FormlyAttributes implements OnChanges {\n  @Input('formlyAttributes') field: FormlyFieldConfig;\n\n  @HostListener('focus', ['$event']) onFocus($event) {\n    this.field.focus = true;\n    if (this.to.focus) {\n      this.to.focus(this.field, $event);\n    }\n  }\n\n  @HostListener('blur', ['$event']) onBlur($event) {\n    this.field.focus = false;\n    if (this.to.blur) {\n      this.to.blur(this.field, $event);\n    }\n  }\n\n  get to(): FormlyTemplateOptions {\n    return this.field.templateOptions || {};\n  }\n\n  constructor(\n    private renderer: Renderer2,\n    private elementRef: ElementRef,\n  ) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.field) {\n      const fieldChanges = changes.field;\n\n      this.renderer.setAttribute(this.elementRef.nativeElement, 'id', this.field.id);\n      if (this.to && this.to.attributes) {\n        this.setAttributes(this.to.attributes);\n        Object.defineProperty(this.to, 'attributes', {\n          get: () => this.to.__attributes__,\n          set: attributes => this.setAttributes(attributes),\n          enumerable: true,\n          configurable: true,\n        });\n      }\n\n      if ((fieldChanges.previousValue || {}).focus !== (fieldChanges.currentValue || {}).focus && this.elementRef.nativeElement.focus) {\n        this.elementRef.nativeElement[this.field.focus ? 'focus' : 'blur']();\n      }\n    }\n  }\n\n  private setAttributes(attributes) {\n    if (this.to.__attributes__ && this.to.__attributes__ !== attributes) {\n      Object.keys(this.to.__attributes__).forEach(name => this.renderer.removeAttribute(this.elementRef.nativeElement, name));\n    }\n\n    this.to.__attributes__ = attributes;\n    Object.keys(attributes).forEach(name => this.renderer.setAttribute(\n      this.elementRef.nativeElement, name, attributes[name] as string,\n    ));\n  }\n}\n","import { Input } from '@angular/core';\nimport { FormGroup, AbstractControl } from '@angular/forms';\nimport { FormlyTemplateOptions, FormlyFieldConfig, FormlyFormOptions } from '../components/formly.field.config';\n\n export abstract class FieldType {\n  @Input() form: FormGroup;\n  @Input() field: FormlyFieldConfig;\n  @Input() options: FormlyFormOptions;\n\n  @Input()\n  get model() { return this.field.model; }\n  set model(m: any) { console.warn(`NgxFormly: passing 'model' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }\n\n  get key() { return this.field.key; }\n\n  get formControl(): AbstractControl { return this.field.formControl; }\n\n  get to(): FormlyTemplateOptions { return this.field.templateOptions; }\n\n  get showError(): boolean { return this.options.showError(this); }\n\n  get id(): string { return this.field.id; }\n\n  get formState() { return this.options.formState || {}; }\n}\n\n/**\n * @deprecated use `FieldType` instead\n */\nexport abstract class Field extends FieldType {\n  constructor() {\n    super();\n    console.warn(`NgxFormly: 'Field' has been renamed to 'FieldType', extend 'FieldType' instead.`);\n  }\n}\n","import { FormArray } from '@angular/forms';\nimport { FieldType } from './field.type';\nimport { clone, isNullOrUndefined } from '../utils';\nimport { FormlyFormBuilder } from '../services/formly.form.builder';\n\nexport abstract class FieldArrayType extends FieldType {\n  formControl: FormArray;\n\n  // tslint:disable-next-line\n  constructor(builder: FormlyFormBuilder) {\n    super();\n  }\n\n  add(i?: number, initialModel?: any) {\n    i = isNullOrUndefined(i) ? this.field.fieldGroup.length : i;\n    this.model.splice(i, 0, initialModel ? clone(initialModel) : undefined);\n\n    (<any> this.options)._buildForm();\n  }\n\n  remove(i: number) {\n    this.model.splice(i, 1);\n\n    (<any> this.options)._buildForm();\n  }\n}\n","import { ViewContainerRef } from '@angular/core';\nimport { FieldType } from './field.type';\n\nexport abstract class FieldWrapper extends FieldType {\n  fieldComponent: ViewContainerRef;\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from '../templates/field.type';\n\n@Component({\n  selector: 'formly-group',\n  template: `\n    <formly-form\n      [fields]=\"field.fieldGroup\"\n      [isRoot]=\"false\"\n      [model]=\"field.model\"\n      [form]=\"field.formControl\"\n      [options]=\"options\"\n      [ngClass]=\"field.fieldGroupClassName\">\n      <ng-content></ng-content>\n    </formly-form>\n  `,\n})\nexport class FormlyGroup extends FieldType {}\n","import { Component, Input } from '@angular/core';\nimport { FormlyConfig } from '../services/formly.config';\nimport { FormlyFieldConfig } from '../components/formly.field.config';\nimport { isObject } from '../utils';\n\n@Component({\n  selector: 'formly-validation-message',\n  template: `{{ errorMessage }}`,\n})\nexport class FormlyValidationMessage {\n  @Input() field: FormlyFieldConfig;\n\n  constructor(private formlyConfig: FormlyConfig) {}\n\n  get errorMessage(): string {\n    const fieldForm = this.field.formControl;\n    for (let error in fieldForm.errors) {\n      if (fieldForm.errors.hasOwnProperty(error)) {\n        let message: string | Function = this.formlyConfig.getValidatorMessage(error);\n\n        if (isObject(fieldForm.errors[error])) {\n          if (fieldForm.errors[error].errorPath) {\n            return;\n          }\n\n          if (fieldForm.errors[error].message) {\n            message = fieldForm.errors[error].message;\n          }\n        }\n\n        if (this.field.validation && this.field.validation.messages && this.field.validation.messages[error]) {\n          message = this.field.validation.messages[error];\n        }\n\n        if (this.field.validators && this.field.validators[error] && this.field.validators[error].message) {\n          message = this.field.validators[error].message;\n        }\n\n        if (this.field.asyncValidators && this.field.asyncValidators[error] && this.field.asyncValidators[error].message) {\n          message = this.field.asyncValidators[error].message;\n        }\n\n        if (typeof message === 'function') {\n          return message(fieldForm.errors[error], this.field);\n        }\n\n        return message;\n      }\n    }\n  }\n}\n","export function evalStringExpression(expression: string, argNames: string[]) {\n  try {\n    return Function(...argNames, `return ${expression};`) as any;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport function evalExpressionValueSetter(expression: string, argNames: string[]) {\n  try {\n    return Function(...argNames, `${expression} = expressionValue;`) as (value: any) => void;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport function evalExpression(expression: string | Function | boolean, thisArg: any, argVal: any[]): any {\n  if (expression instanceof Function) {\n    return expression.apply(thisArg, argVal);\n  } else {\n    return expression ? true : false;\n  }\n}\n","import { FormGroup, FormArray } from '@angular/forms';\nimport { FormlyFieldConfig, FormlyValueChangeEvent, FormlyFieldConfigCache } from '../../components/formly.field.config';\nimport {\n  isObject, isNullOrUndefined, isFunction,\n  FORMLY_VALIDATORS, getFieldValue, getKeyPath, removeFieldControl,\n} from '../../utils';\nimport { evalExpression, evalStringExpression, evalExpressionValueSetter } from './utils';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { FormlyExtension } from '../../services/formly.config';\n\nexport class FieldExpressionExtension implements FormlyExtension {\n  onPopulate(field: FormlyFieldConfigCache) {\n    if (field._expressionProperties) {\n      return;\n    }\n\n    // cache built expression\n    field._expressionProperties = field._expressionProperties || {};\n\n    if (field.expressionProperties) {\n      for (const key in field.expressionProperties) {\n        const expressionProperty = field.expressionProperties[key],\n          expressionValueSetter = evalExpressionValueSetter(\n            `field.${key}`,\n            ['expressionValue', 'model', 'field'],\n          );\n\n        if (typeof expressionProperty === 'string' || isFunction(expressionProperty)) {\n          field._expressionProperties[key] = {\n            expression: this._evalExpression(\n              expressionProperty,\n              field.parent.expressionProperties && field.parent.expressionProperties.hasOwnProperty('templateOptions.disabled')\n                ? () => field.parent.templateOptions.disabled\n                : undefined,\n            ),\n            expressionValueSetter,\n          };\n          if (key === 'templateOptions.disabled') {\n            Object.defineProperty(field._expressionProperties[key], 'expressionValue', {\n              get: () => field.templateOptions.disabled,\n              set: () => { },\n              enumerable: true,\n              configurable: true,\n            });\n          }\n        } else if (expressionProperty instanceof Observable) {\n          const subscription = (expressionProperty as Observable<any>).pipe(\n            tap(v => evalExpression(expressionValueSetter, { field }, [v, field.model, field])),\n          ).subscribe();\n\n          const onDestroy = field.lifecycle.onDestroy;\n          field.lifecycle.onDestroy = (...args) => {\n            if (onDestroy) {\n              onDestroy(...args);\n            }\n            subscription.unsubscribe();\n          };\n        }\n      }\n    }\n\n    if (field.hideExpression || field.parent.hideExpression) {\n      // delete hide value in order to force re-evaluate it in FormlyFormExpression.\n      delete field.hide;\n      field.hideExpression = this._evalExpression(\n        field.hideExpression,\n        field.parent && field.parent.hideExpression ? () => field.parent.hide : undefined,\n      );\n    }\n\n    if (!field.options._checkField) {\n      field.options._checkField = (f) => this._checkField(f);\n    }\n  }\n\n  private _evalExpression(expression, parentExpression?) {\n    expression = expression || (() => false);\n    if (typeof expression === 'string') {\n      expression = evalStringExpression(expression, ['model', 'formState']);\n    }\n\n    return parentExpression\n      ? (model: any, formState: any) => parentExpression() || expression(model, formState)\n      : expression;\n  }\n\n  private _checkField(field: FormlyFieldConfigCache) {\n    field.fieldGroup.forEach(f => {\n      this.checkFieldExpressionChange(f);\n      this.checkFieldVisibilityChange(f);\n\n      if (f.fieldGroup && f.fieldGroup.length > 0) {\n        this._checkField(f);\n      }\n    });\n  }\n\n  private checkFieldExpressionChange(field: FormlyFieldConfigCache) {\n    if (!field || !field._expressionProperties) {\n      return;\n    }\n\n    const expressionProperties = field._expressionProperties;\n    const validators = FORMLY_VALIDATORS.map(v => `templateOptions.${v}`);\n\n    for (const key in expressionProperties) {\n      let expressionValue = evalExpression(expressionProperties[key].expression, { field }, [field.model, field.options.formState]);\n      if (key === 'templateOptions.disabled') {\n        expressionValue = expressionValue || false;\n      }\n\n      if (\n        expressionProperties[key].expressionValue !== expressionValue\n        && (!isObject(expressionValue) || JSON.stringify(expressionValue) !== JSON.stringify(expressionProperties[key].expressionValue))\n      ) {\n        expressionProperties[key].expressionValue = expressionValue;\n        evalExpression(\n          expressionProperties[key].expressionValueSetter,\n          { field },\n          [expressionValue, field.model, field],\n        );\n\n        if (key.indexOf('model.') === 0) {\n          const path = key.replace(/^model\\./, ''),\n            control = field.key && key === path ? field.formControl : field.parent.formControl.get(path);\n\n          if (\n            control\n            && !(isNullOrUndefined(control.value) && isNullOrUndefined(expressionValue))\n            && control.value !== expressionValue\n          ) {\n            control.patchValue(expressionValue);\n          }\n        }\n\n        if (validators.indexOf(key) !== -1 && field.formControl) {\n          field.formControl.updateValueAndValidity({ emitEvent: false });\n        }\n      }\n    }\n  }\n\n  private checkFieldVisibilityChange(field: FormlyFieldConfigCache) {\n    if (!field || isNullOrUndefined(field.hideExpression)) {\n      return;\n    }\n\n    const hideExpressionResult: boolean = !!evalExpression(\n      field.hideExpression,\n      { field },\n      [field.model, field.options.formState],\n    );\n\n    if (hideExpressionResult !== field.hide) {\n      // toggle hide\n      field.hide = hideExpressionResult;\n      field.templateOptions.hidden = hideExpressionResult;\n\n      if (field.formControl && field.key) {\n        const parent = this.fieldParentFormControl(field);\n        if (parent) {\n          const control = parent.get(`${this.fieldKey(field)}`);\n          if (hideExpressionResult === true && control) {\n            removeFieldControl(parent, this.fieldKey(field));\n          } else if (hideExpressionResult === false && !control) {\n            this.addFieldControl(parent, field);\n          }\n        }\n      }\n\n      if (field.options.fieldChanges) {\n        field.options.fieldChanges.next(<FormlyValueChangeEvent> { field: field, type: 'hidden', value: hideExpressionResult });\n      }\n    }\n  }\n\n  private addFieldControl(parent: FormArray | FormGroup, field: FormlyFieldConfig) {\n    const fieldModel = getFieldValue(field);\n    if (\n      !(isNullOrUndefined(field.formControl.value) && isNullOrUndefined(fieldModel))\n      && field.formControl.value !== fieldModel\n    ) {\n      field.formControl.patchValue(fieldModel, { emitEvent: false });\n    }\n\n    if (parent instanceof FormArray) {\n      parent.push(field.formControl);\n    } else if (parent instanceof FormGroup) {\n      parent.addControl(`${this.fieldKey(field)}`, field.formControl);\n    }\n  }\n\n  private fieldParentFormControl(field: FormlyFieldConfig): FormArray | FormGroup {\n    const paths = getKeyPath(field);\n    paths.pop(); // remove last path\n\n    return (paths.length > 0 ? field.parent.formControl.get(paths) : field.parent.formControl) as any;\n  }\n\n  private fieldKey(field: FormlyFieldConfig) {\n    return getKeyPath(field).pop();\n  }\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from './field.type';\n\n@Component({\n  selector: 'formly-template',\n  template: `<div [innerHtml]=\"field.template\"></div>`,\n})\nexport class FormlyTemplateType extends FieldType {}\n","import { NgModule, ModuleWithProviders, ANALYZE_FOR_ENTRY_COMPONENTS, Inject, Optional, ComponentFactoryResolver } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormlyForm } from './components/formly.form';\nimport { FormlyField } from './components/formly.field';\nimport { FormlyAttributes } from './components/formly.attributes';\nimport { FormlyConfig, ConfigOption, FORMLY_CONFIG } from './services/formly.config';\nimport { FormlyFormBuilder } from './services/formly.form.builder';\nimport { FormlyGroup } from './components/formly.group';\nimport { FormlyValidationMessage } from './templates/formly.validation-message';\nimport { FieldExpressionExtension } from './extensions/field-expression/field-expression';\nimport { FormlyTemplateType } from './templates/field-template.type';\n\nexport function defaultFormlyConfig(): ConfigOption {\n  return {\n    types: [\n      { name: 'formly-group', component: FormlyGroup },\n      { name: 'formly-template', component: FormlyTemplateType },\n    ],\n    extensions: [{ name: 'field-expression', extension: new FieldExpressionExtension() }],\n  };\n}\n\n@NgModule({\n  declarations: [\n    FormlyForm,\n    FormlyField,\n    FormlyAttributes,\n    FormlyGroup,\n    FormlyValidationMessage,\n    FormlyTemplateType,\n  ],\n  entryComponents: [FormlyGroup, FormlyTemplateType],\n  exports: [FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage],\n  imports: [CommonModule],\n})\nexport class FormlyModule {\n  static forRoot(config: ConfigOption = {}): ModuleWithProviders {\n    return {\n      ngModule: FormlyModule,\n      providers: [\n        { provide: FORMLY_CONFIG, multi: true, useFactory: defaultFormlyConfig },\n        { provide: FORMLY_CONFIG, useValue: config, multi: true },\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },\n        FormlyConfig,\n        FormlyFormBuilder,\n      ],\n    };\n  }\n\n  static forChild(config: ConfigOption = {}): ModuleWithProviders {\n    return {\n      ngModule: FormlyModule,\n      providers: [\n        { provide: FORMLY_CONFIG, useValue: config, multi: true },\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },\n      ],\n    };\n  }\n\n  constructor(\n    configService: FormlyConfig,\n    componentFactoryResolver: ComponentFactoryResolver,\n    @Optional() @Inject(FORMLY_CONFIG) configs: ConfigOption[] = [],\n  ) {\n    if (!configs) {\n      return;\n    }\n\n    configs.forEach(config => {\n      [...(config.types || []), ...(config.wrappers || [])]\n      .filter(t => !!t)\n      .forEach(t => t.componentFactoryResolver = componentFactoryResolver);\n\n      configService.addConfig(config);\n    });\n  }\n}\n"]}