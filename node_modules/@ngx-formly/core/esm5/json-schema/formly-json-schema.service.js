/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
var FormlyJsonschema = /** @class */ (function () {
    function FormlyJsonschema() {
    }
    /**
     * @param {?} jsonSchema
     * @return {?}
     */
    FormlyJsonschema.prototype.toFieldConfig = /**
     * @param {?} jsonSchema
     * @return {?}
     */
    function (jsonSchema) {
        return this._toFieldConfig(jsonSchema);
    };
    /**
     * @param {?} jsonSchema
     * @param {?=} key
     * @return {?}
     */
    FormlyJsonschema.prototype._toFieldConfig = /**
     * @param {?} jsonSchema
     * @param {?=} key
     * @return {?}
     */
    function (jsonSchema, key) {
        var _this = this;
        /** @type {?} */
        var field = tslib_1.__assign({}, (key ? { key: key } : {}), { type: /** @type {?} */ (jsonSchema.type), defaultValue: jsonSchema.default, templateOptions: {
                minLength: jsonSchema.minLength,
                maxLength: jsonSchema.maxLength,
                label: jsonSchema.title,
                readonly: jsonSchema.readOnly,
                pattern: jsonSchema.pattern,
                description: jsonSchema.description,
            } });
        if (jsonSchema.enum) {
            if (field.type === 'integer' || field.type === 'number') {
                field.parsers = [Number];
            }
            field.type = 'enum';
            field.templateOptions.options = jsonSchema.enum;
            field.templateOptions["labelProp"] = function (item) { return item; };
            field.templateOptions["valueProp"] = function (item) { return item; };
        }
        switch (jsonSchema.type) {
            case 'object': {
                field.fieldGroup = [];
                Object.keys(jsonSchema.properties).forEach(function (p) {
                    /** @type {?} */
                    var child = _this._toFieldConfig(jsonSchema.properties[p], p);
                    if (Array.isArray(jsonSchema.required) && jsonSchema.required.indexOf(p) !== -1) {
                        child.templateOptions.required = true;
                    }
                    field.fieldGroup.push(child);
                });
                break;
            }
            case 'array': {
                if (!Array.isArray(jsonSchema.items)) {
                    field.fieldArray = this._toFieldConfig(/** @type {?} */ (jsonSchema.items));
                }
                else {
                    field['_fieldArray'] = [];
                    field.fieldGroup = [];
                    jsonSchema.items.forEach(function (item) { return field['_fieldArray'].push(_this._toFieldConfig(item)); });
                    if (jsonSchema.additionalItems) {
                        field['_additionalFieldArray'] = this._toFieldConfig(jsonSchema.additionalItems);
                    }
                    Object.defineProperty(field, 'fieldArray', {
                        get: function () {
                            return field['_fieldArray'][field.fieldGroup.length] || field['_additionalFieldArray'];
                        },
                        enumerable: true,
                        configurable: true,
                    });
                }
                break;
            }
        }
        return field;
    };
    FormlyJsonschema.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] },
    ];
    /** @nocollapse */ FormlyJsonschema.ngInjectableDef = i0.defineInjectable({ factory: function FormlyJsonschema_Factory() { return new FormlyJsonschema(); }, token: FormlyJsonschema, providedIn: "root" });
    return FormlyJsonschema;
}());
export { FormlyJsonschema };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWx5LWpzb24tc2NoZW1hLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LWZvcm1seS9jb3JlL2pzb24tc2NoZW1hLyIsInNvdXJjZXMiOlsiZm9ybWx5LWpzb24tc2NoZW1hLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7Ozs7Ozs7SUFNekMsd0NBQWE7Ozs7SUFBYixVQUFjLFVBQXVCO1FBQ25DLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0tBQ3hDOzs7Ozs7SUFFRCx5Q0FBYzs7Ozs7SUFBZCxVQUFlLFVBQXVCLEVBQUUsR0FBWTtRQUFwRCxpQkE2REM7O1FBNURDLElBQU0sS0FBSyx3QkFDTixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEtBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFDdkIsSUFBSSxvQkFBRSxVQUFVLENBQUMsSUFBMkIsR0FDNUMsWUFBWSxFQUFFLFVBQVUsQ0FBQyxPQUFPLEVBQ2hDLGVBQWUsRUFBRTtnQkFDZixTQUFTLEVBQUUsVUFBVSxDQUFDLFNBQVM7Z0JBQy9CLFNBQVMsRUFBRSxVQUFVLENBQUMsU0FBUztnQkFDL0IsS0FBSyxFQUFFLFVBQVUsQ0FBQyxLQUFLO2dCQUN2QixRQUFRLEVBQUUsVUFBVSxDQUFDLFFBQVE7Z0JBQzdCLE9BQU8sRUFBRSxVQUFVLENBQUMsT0FBTztnQkFDM0IsV0FBVyxFQUFFLFVBQVUsQ0FBQyxXQUFXO2FBQ3BDLElBQ0Q7UUFFRixFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNwQixFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUM7Z0JBQ3hELEtBQUssQ0FB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IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybWx5RmllbGRDb25maWcgfSBmcm9tICdAbmd4LWZvcm1seS9jb3JlJztcbmltcG9ydCB7IEpTT05TY2hlbWE3LCBKU09OU2NoZW1hN1R5cGVOYW1lIH0gZnJvbSAnanNvbi1zY2hlbWEnO1xuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIEZvcm1seUpzb25zY2hlbWEge1xuICB0b0ZpZWxkQ29uZmlnKGpzb25TY2hlbWE6IEpTT05TY2hlbWE3KTogRm9ybWx5RmllbGRDb25maWcge1xuICAgIHJldHVybiB0aGlzLl90b0ZpZWxkQ29uZmlnKGpzb25TY2hlbWEpO1xuICB9XG5cbiAgX3RvRmllbGRDb25maWcoanNvblNjaGVtYTogSlNPTlNjaGVtYTcsIGtleT86IHN0cmluZyk6IEZvcm1seUZpZWxkQ29uZmlnIHtcbiAgICBjb25zdCBmaWVsZDogRm9ybWx5RmllbGRDb25maWcgPSB7XG4gICAgICAuLi4oa2V5ID8geyBrZXkgfSA6IHt9KSxcbiAgICAgIHR5cGU6IGpzb25TY2hlbWEudHlwZSBhcyBKU09OU2NoZW1hN1R5cGVOYW1lLFxuICAgICAgZGVmYXVsdFZhbHVlOiBqc29uU2NoZW1hLmRlZmF1bHQsXG4gICAgICB0ZW1wbGF0ZU9wdGlvbnM6IHtcbiAgICAgICAgbWluTGVuZ3RoOiBqc29uU2NoZW1hLm1pbkxlbmd0aCxcbiAgICAgICAgbWF4TGVuZ3RoOiBqc29uU2NoZW1hLm1heExlbmd0aCxcbiAgICAgICAgbGFiZWw6IGpzb25TY2hlbWEudGl0bGUsXG4gICAgICAgIHJlYWRvbmx5OiBqc29uU2NoZW1hLnJlYWRPbmx5LFxuICAgICAgICBwYXR0ZXJuOiBqc29uU2NoZW1hLnBhdHRlcm4sXG4gICAgICAgIGRlc2NyaXB0aW9uOiBqc29uU2NoZW1hLmRlc2NyaXB0aW9uLFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgaWYgKGpzb25TY2hlbWEuZW51bSkge1xuICAgICAgaWYgKGZpZWxkLnR5cGUgPT09ICdpbnRlZ2VyJyB8fCBmaWVsZC50eXBlID09PSAnbnVtYmVyJykge1xuICAgICAgICBmaWVsZC5wYXJzZXJzID0gW051bWJlcl07XG4gICAgICB9XG4gICAgICBmaWVsZC50eXBlID0gJ2VudW0nO1xuICAgICAgZmllbGQudGVtcGxhdGVPcHRpb25zLm9wdGlvbnMgPSBqc29uU2NoZW1hLmVudW07XG4gICAgICBmaWVsZC50ZW1wbGF0ZU9wdGlvbnMubGFiZWxQcm9wID0gaXRlbSA9PiBpdGVtO1xuICAgICAgZmllbGQudGVtcGxhdGVPcHRpb25zLnZhbHVlUHJvcCA9IGl0ZW0gPT4gaXRlbTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKGpzb25TY2hlbWEudHlwZSkge1xuICAgICAgY2FzZSAnb2JqZWN0Jzoge1xuICAgICAgICBmaWVsZC5maWVsZEdyb3VwID0gW107XG4gICAgICAgIE9iamVjdC5rZXlzKGpzb25TY2hlbWEucHJvcGVydGllcykuZm9yRWFjaChwID0+IHtcbiAgICAgICAgICBjb25zdCBjaGlsZCA9IHRoaXMuX3RvRmllbGRDb25maWcoanNvblNjaGVtYS5wcm9wZXJ0aWVzW3BdLCBwKTtcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShqc29uU2NoZW1hLnJlcXVpcmVkKSAmJiBqc29uU2NoZW1hLnJlcXVpcmVkLmluZGV4T2YocCkgIT09IC0xKSB7XG4gICAgICAgICAgICBjaGlsZC50ZW1wbGF0ZU9wdGlvbnMucmVxdWlyZWQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmaWVsZC5maWVsZEdyb3VwLnB1c2goY2hpbGQpO1xuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlICdhcnJheSc6IHtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGpzb25TY2hlbWEuaXRlbXMpKSB7XG4gICAgICAgICAgZmllbGQuZmllbGRBcnJheSA9IHRoaXMuX3RvRmllbGRDb25maWcoanNvblNjaGVtYS5pdGVtcyBhcyBKU09OU2NoZW1hNyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmllbGRbJ19maWVsZEFycmF5J10gPSBbXTtcbiAgICAgICAgICBmaWVsZC5maWVsZEdyb3VwID0gW107XG4gICAgICAgICAganNvblNjaGVtYS5pdGVtcy5mb3JFYWNoKGl0ZW0gPT4gZmllbGRbJ19maWVsZEFycmF5J10ucHVzaCh0aGlzLl90b0ZpZWxkQ29uZmlnKGl0ZW0pKSk7XG4gICAgICAgICAgaWYgKGpzb25TY2hlbWEuYWRkaXRpb25hbEl0ZW1zKSB7XG4gICAgICAgICAgICBmaWVsZFsnX2FkZGl0aW9uYWxGaWVsZEFycmF5J10gPSB0aGlzLl90b0ZpZWxkQ29uZmlnKGpzb25TY2hlbWEuYWRkaXRpb25hbEl0ZW1zKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZmllbGQsICdmaWVsZEFycmF5Jywge1xuICAgICAgICAgICAgZ2V0OiAoKSA9PiB7XG4gICAgICAgICAgICAgIHJldHVybiBmaWVsZFsnX2ZpZWxkQXJyYXknXVtmaWVsZC5maWVsZEdyb3VwLmxlbmd0aF0gfHwgZmllbGRbJ19hZGRpdGlvbmFsRmllbGRBcnJheSddO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZpZWxkO1xuICB9XG59XG4iXX0=