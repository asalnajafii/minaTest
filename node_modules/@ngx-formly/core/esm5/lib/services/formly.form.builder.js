/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { FormGroup, FormArray, FormControl, AbstractControl, Validators } from '@angular/forms';
import { FormlyConfig } from './formly.config';
import { FORMLY_VALIDATORS, getFieldId, isObject, isNullOrUndefined, getKeyPath, assignModelValue, isUndefined, clone, removeFieldControl, getFieldValue } from '../utils';
import * as i0 from "@angular/core";
import * as i1 from "./formly.config";
var FormlyFormBuilder = /** @class */ (function () {
    function FormlyFormBuilder(formlyConfig) {
        this.formlyConfig = formlyConfig;
        this.formId = 0;
    }
    /**
     * @param {?} formControl
     * @param {?=} fieldGroup
     * @param {?=} model
     * @param {?=} options
     * @return {?}
     */
    FormlyFormBuilder.prototype.buildForm = /**
     * @param {?} formControl
     * @param {?=} fieldGroup
     * @param {?=} model
     * @param {?=} options
     * @return {?}
     */
    function (formControl, fieldGroup, model, options) {
        if (fieldGroup === void 0) { fieldGroup = []; }
        /** @type {?} */
        var fieldTransforms = (options && options.fieldTransform) || this.formlyConfig.extras.fieldTransform;
        (Array.isArray(fieldTransforms) ? fieldTransforms : [fieldTransforms]).forEach(function (fieldTransform) {
            if (fieldTransform) {
                fieldGroup = fieldTransform(fieldGroup, model, formControl, options);
                if (!fieldGroup) {
                    throw new Error('fieldTransform must return an array of fields');
                }
            }
        });
        this._buildForm({ fieldGroup: fieldGroup, model: model, formControl: formControl, options: options });
        if ((/** @type {?} */ (options))._checkField) {
            (/** @type {?} */ (options))._checkField({ fieldGroup: fieldGroup, model: model, formControl: formControl, options: options });
        }
    };
    /**
     * @param {?} root
     * @return {?}
     */
    FormlyFormBuilder.prototype._buildForm = /**
     * @param {?} root
     * @return {?}
     */
    function (root) {
        var _this = this;
        this.formId++;
        root.fieldGroup.forEach(function (field, index) {
            _this.getExtensions().forEach(function (extension) { return extension.prePopulate && extension.prePopulate(field); });
            _this.initFieldOptions(root, field, index);
            _this.getExtensions().forEach(function (extension) { return extension.onPopulate && extension.onPopulate(field); });
            _this.initFieldValidation(field);
            _this.initFieldAsyncValidation(field);
            if (field.key && field.type) {
                /** @type {?} */
                var paths_1 = getKeyPath({ key: field.key });
                /** @type {?} */
                var rootForm_1 = /** @type {?} */ (root.formControl);
                /** @type {?} */
                var rootModel_1 = field.fieldGroup ? (_a = {}, _a[paths_1[0]] = field.model, _a) : field.model;
                paths_1.forEach(function (path, index) {
                    /** @type {?} */
                    var formPath = path.toString();
                    // is last item
                    if (index === paths_1.length - 1) {
                        _this.addFormControl(rootForm_1, field, rootModel_1, formPath);
                    }
                    else {
                        /** @type {?} */
                        var nestedForm = /** @type {?} */ (rootForm_1.get(formPath));
                        if (!nestedForm) {
                            nestedForm = new FormGroup({});
                            _this.addControl(rootForm_1, formPath, nestedForm);
                        }
                        if (!rootModel_1[path]) {
                            rootModel_1[path] = typeof path === 'string' ? {} : [];
                        }
                        rootForm_1 = nestedForm;
                        rootModel_1 = rootModel_1[path];
                    }
                });
            }
            else if (!field.key && field.fieldGroup) {
                field.formControl = root.formControl;
            }
            if (field.fieldGroup) {
                _this._buildForm(field);
            }
            _this.getExtensions().forEach(function (extension) { return extension.postPopulate && extension.postPopulate(field); });
            var _a;
        });
    };
    /**
     * @return {?}
     */
    FormlyFormBuilder.prototype.getExtensions = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return Object.keys(this.formlyConfig.extensions).map(function (name) { return _this.formlyConfig.extensions[name]; });
    };
    /**
     * @param {?} root
     * @param {?} field
     * @param {?} index
     * @return {?}
     */
    FormlyFormBuilder.prototype.initFieldOptions = /**
     * @param {?} root
     * @param {?} field
     * @param {?} index
     * @return {?}
     */
    function (root, field, index) {
        Object.defineProperty(field, 'options', { get: function () { return root.options; }, configurable: true });
        Object.defineProperty(field, 'parent', { get: function () { return root; }, configurable: true });
        Object.defineProperty(field, 'model', {
            get: function () { return field.key && field.fieldGroup ? getFieldValue(field) : root.model; },
            configurable: true,
        });
        field.id = getFieldId("formly_" + this.formId, field, index);
        field.templateOptions = field.templateOptions || {};
        field.modelOptions = field.modelOptions || {};
        field.lifecycle = field.lifecycle || {};
        if (field.type && field.key) {
            field.templateOptions = Object.assign({
                label: '',
                placeholder: '',
                focus: false,
            }, field.templateOptions);
        }
        if (field.template && field.type !== 'formly-template') {
            if (field.type) {
                console.warn("NgxFormly: passing 'type' property is not allowed when 'template' is set.");
            }
            field.type = 'formly-template';
        }
        if (field.type) {
            this.formlyConfig.getMergedField(field);
        }
        if (field.key && isUndefined(field.defaultValue) && (field.fieldGroup || field.fieldArray)) {
            field.defaultValue = field.fieldArray ? [] : {};
        }
        if (!isUndefined(field.defaultValue) && isUndefined(getFieldValue(field))) {
            assignModelValue(root.model, field.key, field.defaultValue);
        }
        this.initFieldWrappers(field);
        if (field.fieldArray) {
            this.initFieldArray(field);
        }
        if (!field.type && field.fieldGroup) {
            field.type = 'formly-group';
        }
    };
    /**
     * @param {?} field
     * @return {?}
     */
    FormlyFormBuilder.prototype.initFieldArray = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        field.fieldGroup = field.fieldGroup || [];
        if (field.fieldGroup.length > field.model.length) {
            for (var i = field.fieldGroup.length; i >= field.model.length; --i) {
                removeFieldControl(/** @type {?} */ (field.formControl), i);
                field.fieldGroup.splice(i, 1);
            }
        }
        for (var i = field.fieldGroup.length; i < field.model.length; i++) {
            /** @type {?} */
            var f = tslib_1.__assign({}, clone(field.fieldArray), { key: "" + i });
            field.fieldGroup.push(f);
        }
    };
    /**
     * @param {?} form
     * @param {?} field
     * @param {?} model
     * @param {?} path
     * @return {?}
     */
    FormlyFormBuilder.prototype.addFormControl = /**
     * @param {?} form
     * @param {?} field
     * @param {?} model
     * @param {?} path
     * @return {?}
     */
    function (form, field, model, path) {
        /** @type {?} */
        var abstractControlOptions = /** @type {?} */ ({
            validators: field._validators,
            asyncValidators: field._asyncValidators,
            updateOn: field.modelOptions.updateOn,
        });
        /** @type {?} */
        var control;
        if (field.formControl instanceof AbstractControl || form.get(path)) {
            control = field.formControl || form.get(path);
            if (!(isNullOrUndefined(control.value) && isNullOrUndefined(model[path]))
                && control.value !== model[path]
                && control instanceof FormControl) {
                control.patchValue(model[path]);
            }
            if (abstractControlOptions.validators || abstractControlOptions.asyncValidators) {
                if (abstractControlOptions.validators) {
                    control.setValidators(abstractControlOptions.validators);
                }
                if (abstractControlOptions.asyncValidators) {
                    control.setAsyncValidators(abstractControlOptions.asyncValidators);
                }
                control.updateValueAndValidity();
            }
        }
        else if ((/** @type {?} */ (field)).component && (/** @type {?} */ (field)).component.createControl) {
            control = (/** @type {?} */ (field)).component.createControl(model[path], field);
        }
        else if (field.fieldGroup && !field.fieldArray) {
            control = new FormGroup({}, abstractControlOptions);
        }
        else if (field.fieldArray) {
            control = new FormArray([], abstractControlOptions);
        }
        else {
            control = new FormControl(model[path], abstractControlOptions);
        }
        if (field.templateOptions.disabled) {
            control.disable();
        }
        // Replace decorated property with a getter that returns the observable.
        // https://github.com/angular-redux/store/blob/master/src/decorators/select.ts#L79-L85
        if (delete field.templateOptions.disabled) {
            Object.defineProperty(field.templateOptions, 'disabled', {
                get: function () { return !field.formControl.enabled; },
                set: function (value) { return value ? field.formControl.disable() : field.formControl.enable(); },
                enumerable: true,
                configurable: true,
            });
        }
        this.addControl(form, path, control, field);
    };
    /**
     * @param {?} form
     * @param {?} key
     * @param {?} formControl
     * @param {?=} field
     * @return {?}
     */
    FormlyFormBuilder.prototype.addControl = /**
     * @param {?} form
     * @param {?} key
     * @param {?} formControl
     * @param {?=} field
     * @return {?}
     */
    function (form, key, formControl, field) {
        if (field) {
            field.formControl = formControl;
        }
        if (form instanceof FormArray) {
            if (form.at(/** @type {?} */ (key)) !== formControl) {
                form.setControl(/** @type {?} */ (key), formControl);
            }
        }
        else {
            if (form.get(/** @type {?} */ (key)) !== formControl) {
                form.setControl(/** @type {?} */ (key), formControl);
            }
        }
    };
    /**
     * @param {?} field
     * @return {?}
     */
    FormlyFormBuilder.prototype.initFieldValidation = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        var _this = this;
        if (field._validators) {
            return;
        }
        field._validators = [];
        this.initPredefinedFieldValidation(field);
        if (field.validators) {
            var _loop_1 = function (validatorName) {
                if (validatorName !== 'validation') {
                    /** @type {?} */
                    var validator_1 = field.validators[validatorName];
                    /** @type {?} */
                    var errorPath_1 = void 0;
                    /** @type {?} */
                    var message_1 = void 0;
                    if (isObject(validator_1)) {
                        errorPath_1 = validator_1.errorPath;
                        message_1 = validator_1.message;
                        validator_1 = validator_1.expression;
                    }
                    field._validators.push(function (control) {
                        /** @type {?} */
                        var isValid = validator_1(control, field);
                        if (errorPath_1 && field.formControl && field.formControl.get(errorPath_1)) {
                            if (!isValid) {
                                field.formControl.get(errorPath_1).setErrors(tslib_1.__assign({}, (field.formControl.get(errorPath_1).errors || {}), (_a = {}, _a[validatorName] = { message: message_1 }, _a)));
                            }
                            else {
                                /** @type {?} */
                                var errors = (field.formControl.get(errorPath_1).errors || {});
                                delete errors[validatorName];
                                field.formControl.get(errorPath_1).setErrors(Object.keys(errors).length === 0 ? null : errors);
                            }
                        }
                        return isValid ? null : (_b = {}, _b[validatorName] = errorPath_1 ? { errorPath: errorPath_1 } : true, _b);
                        var _a, _b;
                    });
                }
                else {
                    if (!Array.isArray(field.validators.validation)) {
                        field.validators.validation = [field.validators.validation];
                    }
                    field.validators.validation
                        .forEach(function (validator) { return field._validators.push(_this.wrapNgValidatorFn(field, validator)); });
                }
            };
            for (var validatorName in field.validators) {
                _loop_1(validatorName);
            }
        }
    };
    /**
     * @param {?} field
     * @return {?}
     */
    FormlyFormBuilder.prototype.initFieldAsyncValidation = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        var _this = this;
        if (field._asyncValidators) {
            return;
        }
        field._asyncValidators = [];
        if (field.asyncValidators) {
            var _loop_2 = function (validatorName) {
                if (validatorName !== 'validation') {
                    /** @type {?} */
                    var validator_2 = field.asyncValidators[validatorName];
                    if (isObject(validator_2)) {
                        validator_2 = validator_2.expression;
                    }
                    field._asyncValidators.push(function (control) { return new Promise(function (resolve) {
                        return validator_2(control, field).then(function (result) {
                            resolve(result ? null : (_a = {}, _a[validatorName] = true, _a));
                            var _a;
                        });
                    }); });
                }
                else {
                    if (!Array.isArray(field.asyncValidators.validation)) {
                        field.asyncValidators.validation = [field.asyncValidators.validation];
                    }
                    field.asyncValidators.validation
                        .forEach(function (validator) { return field._asyncValidators.push(/** @type {?} */ (_this.wrapNgValidatorFn(field, validator))); });
                }
            };
            for (var validatorName in field.asyncValidators) {
                _loop_2(validatorName);
            }
        }
    };
    /**
     * @param {?} field
     * @return {?}
     */
    FormlyFormBuilder.prototype.initPredefinedFieldValidation = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        FORMLY_VALIDATORS
            .filter(function (opt) { return field.templateOptions.hasOwnProperty(opt) || (field.expressionProperties && field.expressionProperties["templateOptions." + opt]); })
            .forEach(function (opt) {
            field._validators.push(function (control) {
                /** @type {?} */
                var value = field.templateOptions[opt];
                if (value === false) {
                    return null;
                }
                switch (opt) {
                    case 'required':
                        return Validators.required(control);
                    case 'pattern':
                        return Validators.pattern(value)(control);
                    case 'minLength':
                        return Validators.minLength(value)(control);
                    case 'maxLength':
                        return Validators.maxLength(value)(control);
                    case 'min':
                        return Validators.min(value)(control);
                    case 'max':
                        return Validators.max(value)(control);
                }
            });
        });
    };
    /**
     * @param {?} field
     * @param {?} validator
     * @return {?}
     */
    FormlyFormBuilder.prototype.wrapNgValidatorFn = /**
     * @param {?} field
     * @param {?} validator
     * @return {?}
     */
    function (field, validator) {
        validator = typeof validator === 'string'
            ? this.formlyConfig.getValidator(validator).validation
            : validator;
        return function (control) { return (/** @type {?} */ (validator))(control, field); };
    };
    /**
     * @param {?} field
     * @return {?}
     */
    FormlyFormBuilder.prototype.initFieldWrappers = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        field.wrappers = field.wrappers || [];
        /** @type {?} */
        var fieldTemplateManipulators = tslib_1.__assign({ preWrapper: [], postWrapper: [] }, (field.templateOptions.templateManipulators || {}));
        field.wrappers = tslib_1.__spread(this.formlyConfig.templateManipulators.preWrapper.map(function (m) { return m(field); }), fieldTemplateManipulators.preWrapper.map(function (m) { return m(field); }), field.wrappers, this.formlyConfig.templateManipulators.postWrapper.map(function (m) { return m(field); }), fieldTemplateManipulators.postWrapper.map(function (m) { return m(field); })).filter(function (el, i, a) { return el && i === a.indexOf(el); });
    };
    FormlyFormBuilder.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] },
    ];
    /** @nocollapse */
    FormlyFormBuilder.ctorParameters = function () { return [
        { type: FormlyConfig }
    ]; };
    /** @nocollapse */ FormlyFormBuilder.ngInjectableDef = i0.defineInjectable({ factory: function FormlyFormBuilder_Factory() { return new FormlyFormBuilder(i0.inject(i1.FormlyConfig)); }, token: FormlyFormBuilder, providedIn: "root" });
    return FormlyFormBuilder;
}());
export { FormlyFormBuilder };
if (false) {
    /** @type {?} */
    FormlyFormBuilder.prototype.formId;
    /** @type {?} */
    FormlyFormBuilder.prototype.formlyConfig;
}

//# sourceMappingURL=data:application/json;base64,