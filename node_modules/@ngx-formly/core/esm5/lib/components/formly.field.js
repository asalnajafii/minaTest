/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, EventEmitter, Input, Output, ViewContainerRef, ViewChild, } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { FormlyConfig } from '../services/formly.config';
var FormlyField = /** @class */ (function () {
    function FormlyField(formlyConfig) {
        this.formlyConfig = formlyConfig;
        this.options = {};
        this.modelChange = new EventEmitter();
        this.componentRefs = [];
    }
    Object.defineProperty(FormlyField.prototype, "model", {
        set: /**
         * @param {?} m
         * @return {?}
         */
        function (m) {
            console.warn("NgxFormly: passing 'model' input to '" + this.constructor.name + "' component is not required anymore, you may remove it!");
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FormlyField.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.lifeCycleHooks(this.lifecycle.afterContentInit);
    };
    /**
     * @return {?}
     */
    FormlyField.prototype.ngAfterContentChecked = /**
     * @return {?}
     */
    function () {
        this.lifeCycleHooks(this.lifecycle.afterContentChecked);
    };
    /**
     * @return {?}
     */
    FormlyField.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.lifeCycleHooks(this.lifecycle.afterViewInit);
    };
    /**
     * @return {?}
     */
    FormlyField.prototype.ngAfterViewChecked = /**
     * @return {?}
     */
    function () {
        this.lifeCycleHooks(this.lifecycle.afterViewChecked);
    };
    /**
     * @return {?}
     */
    FormlyField.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        this.lifeCycleHooks(this.lifecycle.doCheck);
    };
    /**
     * @return {?}
     */
    FormlyField.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.lifeCycleHooks(this.lifecycle.onInit);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    FormlyField.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (changes["field"]) {
            this.renderField(this.field, this.containerRef);
        }
        this.lifeCycleHooks(this.lifecycle.onChanges);
        this.componentRefs.forEach(function (ref) {
            Object.assign(ref.instance, {
                form: _this.form,
                field: _this.field,
                options: _this.options,
            });
        });
    };
    /**
     * @return {?}
     */
    FormlyField.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.lifeCycleHooks(this.lifecycle.onDestroy);
        this.componentRefs.forEach(function (componentRef) { return componentRef.destroy(); });
        this.componentRefs = [];
    };
    /**
     * @param {?} field
     * @param {?} containerRef
     * @return {?}
     */
    FormlyField.prototype.renderField = /**
     * @param {?} field
     * @param {?} containerRef
     * @return {?}
     */
    function (field, containerRef) {
        var _this = this;
        this.componentRefs.forEach(function (componentRef) { return componentRef.destroy(); });
        this.componentRefs = [];
        /** @type {?} */
        var wrappers = /** @type {?} */ ((field.wrappers || []).map(function (wrapperName) { return _this.formlyConfig.getWrapper(wrapperName); }));
        tslib_1.__spread(wrappers, [this.formlyConfig.getType(field.type)]).forEach(function (_a) {
            var componentFactoryResolver = _a.componentFactoryResolver, component = _a.component;
            /** @type {?} */
            var ref = containerRef.createComponent(componentFactoryResolver.resolveComponentFactory(component));
            Object.assign(ref.instance, { form: _this.form, options: _this.options, field: field });
            _this.componentRefs.push(ref);
            containerRef = ref.instance.fieldComponent;
        });
    };
    Object.defineProperty(FormlyField.prototype, "lifecycle", {
        get: /**
         * @return {?}
         */
        function () {
            return this.field.lifecycle || {};
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} callback
     * @return {?}
     */
    FormlyField.prototype.lifeCycleHooks = /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        if (callback) {
            callback(this.form, this.field, this.field.model, this.options);
        }
    };
    FormlyField.decorators = [
        { type: Component, args: [{
                    selector: 'formly-field',
                    template: "<ng-template #container></ng-template>",
                    host: {
                        '[style.display]': 'field.hide ? "none":""',
                    },
                },] },
    ];
    /** @nocollapse */
    FormlyField.ctorParameters = function () { return [
        { type: FormlyConfig }
    ]; };
    FormlyField.propDecorators = {
        model: [{ type: Input }],
        form: [{ type: Input }],
        field: [{ type: Input }],
        options: [{ type: Input }],
        modelChange: [{ type: Output }],
        containerRef: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }]
    };
    return FormlyField;
}());
export { FormlyField };
if (false) {
    /** @type {?} */
    FormlyField.prototype.form;
    /** @type {?} */
    FormlyField.prototype.field;
    /** @type {?} */
    FormlyField.prototype.options;
    /** @type {?} */
    FormlyField.prototype.modelChange;
    /** @type {?} */
    FormlyField.prototype.containerRef;
    /** @type {?} */
    FormlyField.prototype.componentRefs;
    /** @type {?} */
    FormlyField.prototype.formlyConfig;
}

//# sourceMappingURL=data:application/json;base64,