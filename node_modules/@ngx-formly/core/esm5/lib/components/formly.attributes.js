/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Directive, HostListener, ElementRef, Input, Renderer2 } from '@angular/core';
var FormlyAttributes = /** @class */ (function () {
    function FormlyAttributes(renderer, elementRef) {
        this.renderer = renderer;
        this.elementRef = elementRef;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    FormlyAttributes.prototype.onFocus = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.field.focus = true;
        if (this.to.focus) {
            this.to.focus(this.field, $event);
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    FormlyAttributes.prototype.onBlur = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.field.focus = false;
        if (this.to.blur) {
            this.to.blur(this.field, $event);
        }
    };
    Object.defineProperty(FormlyAttributes.prototype, "to", {
        get: /**
         * @return {?}
         */
        function () {
            return this.field.templateOptions || {};
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    FormlyAttributes.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (changes["field"]) {
            /** @type {?} */
            var fieldChanges = changes["field"];
            this.renderer.setAttribute(this.elementRef.nativeElement, 'id', this.field.id);
            if (this.to && this.to.attributes) {
                this.setAttributes(this.to.attributes);
                Object.defineProperty(this.to, 'attributes', {
                    get: function () { return _this.to["__attributes__"]; },
                    set: function (attributes) { return _this.setAttributes(attributes); },
                    enumerable: true,
                    configurable: true,
                });
            }
            if ((fieldChanges.previousValue || {}).focus !== (fieldChanges.currentValue || {}).focus && this.elementRef.nativeElement.focus) {
                this.elementRef.nativeElement[this.field.focus ? 'focus' : 'blur']();
            }
        }
    };
    /**
     * @param {?} attributes
     * @return {?}
     */
    FormlyAttributes.prototype.setAttributes = /**
     * @param {?} attributes
     * @return {?}
     */
    function (attributes) {
        var _this = this;
        if (this.to["__attributes__"] && this.to["__attributes__"] !== attributes) {
            Object.keys(this.to["__attributes__"]).forEach(function (name) { return _this.renderer.removeAttribute(_this.elementRef.nativeElement, name); });
        }
        this.to["__attributes__"] = attributes;
        Object.keys(attributes).forEach(function (name) { return _this.renderer.setAttribute(_this.elementRef.nativeElement, name, /** @type {?} */ (attributes[name])); });
    };
    FormlyAttributes.decorators = [
        { type: Directive, args: [{
                    selector: '[formlyAttributes]',
                    host: {
                        '[attr.name]': 'field.name',
                        '[attr.placeholder]': 'to.placeholder',
                        '[attr.tabindex]': 'to.tabindex',
                        '[attr.readonly]': 'to.readonly',
                        '[attr.step]': 'to.step',
                        '(keyup)': 'to.keyup && to.keyup(field, $event)',
                        '(keydown)': 'to.keydown && to.keydown(field, $event)',
                        '(click)': 'to.click && to.click(field, $event)',
                        '(change)': 'to.change && to.change(field, $event)',
                        '(keypress)': 'to.keypress && to.keypress(field, $event)',
                    },
                },] },
    ];
    /** @nocollapse */
    FormlyAttributes.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    FormlyAttributes.propDecorators = {
        field: [{ type: Input, args: ['formlyAttributes',] }],
        onFocus: [{ type: HostListener, args: ['focus', ['$event'],] }],
        onBlur: [{ type: HostListener, args: ['blur', ['$event'],] }]
    };
    return FormlyAttributes;
}());
export { FormlyAttributes };
if (false) {
    /** @type {?} */
    FormlyAttributes.prototype.field;
    /** @type {?} */
    FormlyAttributes.prototype.renderer;
    /** @type {?} */
    FormlyAttributes.prototype.elementRef;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWx5LmF0dHJpYnV0ZXMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LWZvcm1seS9jb3JlLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvZm9ybWx5LmF0dHJpYnV0ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQTRCLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7SUF3QzlHLDBCQUNVLFVBQ0E7UUFEQSxhQUFRLEdBQVIsUUFBUTtRQUNSLGVBQVUsR0FBVixVQUFVO0tBQ2hCOzs7OztJQXJCK0Isa0NBQU87Ozs7SUFBMUMsVUFBMkMsTUFBTTtRQUMvQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDeEIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ2xCLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDbkM7S0FDRjs7Ozs7SUFFaUMsaUNBQU07Ozs7SUFBeEMsVUFBeUMsTUFBTTtRQUM3QyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDekIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ2pCLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDbEM7S0FDRjtJQUVELHNCQUFJLGdDQUFFOzs7O1FBQU47WUFDRSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLElBQUksRUFBRSxDQUFDO1NBQ3pDOzs7T0FBQTs7Ozs7SUFPRCxzQ0FBVzs7OztJQUFYLFVBQVksT0FBc0I7UUFBbEMsaUJBbUJDO1FBbEJD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QyxZQUFZLFNBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDOzsyQkE3QmxDOztTQW1CYSxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEhvc3RMaXN0ZW5lciwgRWxlbWVudFJlZiwgSW5wdXQsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcywgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtbHlGaWVsZENvbmZpZywgRm9ybWx5VGVtcGxhdGVPcHRpb25zIH0gZnJvbSAnLi9mb3JtbHkuZmllbGQuY29uZmlnJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2Zvcm1seUF0dHJpYnV0ZXNdJyxcbiAgaG9zdDoge1xuICAgICdbYXR0ci5uYW1lXSc6ICdmaWVsZC5uYW1lJyxcbiAgICAnW2F0dHIucGxhY2Vob2xkZXJdJzogJ3RvLnBsYWNlaG9sZGVyJyxcbiAgICAnW2F0dHIudGFiaW5kZXhdJzogJ3RvLnRhYmluZGV4JyxcbiAgICAnW2F0dHIucmVhZG9ubHldJzogJ3RvLnJlYWRvbmx5JyxcbiAgICAnW2F0dHIuc3RlcF0nOiAndG8uc3RlcCcsXG5cbiAgICAnKGtleXVwKSc6ICd0by5rZXl1cCAmJiB0by5rZXl1cChmaWVsZCwgJGV2ZW50KScsXG4gICAgJyhrZXlkb3duKSc6ICd0by5rZXlkb3duICYmIHRvLmtleWRvd24oZmllbGQsICRldmVudCknLFxuICAgICcoY2xpY2spJzogJ3RvLmNsaWNrICYmIHRvLmNsaWNrKGZpZWxkLCAkZXZlbnQpJyxcbiAgICAnKGNoYW5nZSknOiAndG8uY2hhbmdlICYmIHRvLmNoYW5nZShmaWVsZCwgJGV2ZW50KScsXG4gICAgJyhrZXlwcmVzcyknOiAndG8ua2V5cHJlc3MgJiYgdG8ua2V5cHJlc3MoZmllbGQsICRldmVudCknLFxuICB9LFxufSlcbmV4cG9ydCBjbGFzcyBGb3JtbHlBdHRyaWJ1dGVzIGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgQElucHV0KCdmb3JtbHlBdHRyaWJ1dGVzJykgZmllbGQ6IEZvcm1seUZpZWxkQ29uZmlnO1xuXG4gIEBIb3N0TGlzdGVuZXIoJ2ZvY3VzJywgWyckZXZlbnQnXSkgb25Gb2N1cygkZXZlbnQpIHtcbiAgICB0aGlzLmZpZWxkLmZvY3VzID0gdHJ1ZTtcbiAgICBpZiAodGhpcy50by5mb2N1cykge1xuICAgICAgdGhpcy50by5mb2N1cyh0aGlzLmZpZWxkLCAkZXZlbnQpO1xuICAgIH1cbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2JsdXInLCBbJyRldmVudCddKSBvbkJsdXIoJGV2ZW50KSB7XG4gICAgdGhpcy5maWVsZC5mb2N1cyA9IGZhbHNlO1xuICAgIGlmICh0aGlzLnRvLmJsdXIpIHtcbiAgICAgIHRoaXMudG8uYmx1cih0aGlzLmZpZWxkLCAkZXZlbnQpO1xuICAgIH1cbiAgfVxuXG4gIGdldCB0bygpOiBGb3JtbHlUZW1wbGF0ZU9wdGlvbnMge1xuICAgIHJldHVybiB0aGlzLmZpZWxkLnRlbXBsYXRlT3B0aW9ucyB8fCB7fTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICkge31cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMuZmllbGQpIHtcbiAgICAgIGNvbnN0IGZpZWxkQ2hhbmdlcyA9IGNoYW5nZXMuZmllbGQ7XG5cbiAgICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnaWQnLCB0aGlzLmZpZWxkLmlkKTtcbiAgICAgIGlmICh0aGlzLnRvICYmIHRoaXMudG8uYXR0cmlidXRlcykge1xuICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZXModGhpcy50by5hdHRyaWJ1dGVzKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMudG8sICdhdHRyaWJ1dGVzJywge1xuICAgICAgICAgIGdldDogKCkgPT4gdGhpcy50by5fX2F0dHJpYnV0ZXNfXyxcbiAgICAgICAgICBzZXQ6IGF0dHJpYnV0ZXMgPT4gdGhpcy5zZXRBdHRyaWJ1dGVzKGF0dHJpYnV0ZXMpLFxuICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKChmaWVsZENoYW5nZXMucHJldmlvdXNWYWx1ZSB8fCB7fSkuZm9jdXMgIT09IChmaWVsZENoYW5nZXMuY3VycmVudFZhbHVlIHx8IHt9KS5mb2N1cyAmJiB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5mb2N1cykge1xuICAgICAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudFt0aGlzLmZpZWxkLmZvY3VzID8gJ2ZvY3VzJyA6ICdibHVyJ10oKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHNldEF0dHJpYnV0ZXMoYXR0cmlidXRlcykge1xuICAgIGlmICh0aGlzLnRvLl9fYXR0cmlidXRlc19fICYmIHRoaXMudG8uX19hdHRyaWJ1dGVzX18gIT09IGF0dHJpYnV0ZXMpIHtcbiAgICAgIE9iamVjdC5rZXlzKHRoaXMudG8uX19hdHRyaWJ1dGVzX18pLmZvckVhY2gobmFtZSA9PiB0aGlzLnJlbmRlcmVyLnJlbW92ZUF0dHJpYnV0ZSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgbmFtZSkpO1xuICAgIH1cblxuICAgIHRoaXMudG8uX19hdHRyaWJ1dGVzX18gPSBhdHRyaWJ1dGVzO1xuICAgIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2gobmFtZSA9PiB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZShcbiAgICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCBuYW1lLCBhdHRyaWJ1dGVzW25hbWVdIGFzIHN0cmluZyxcbiAgICApKTtcbiAgfVxufVxuIl19