/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class FormlyJsonschema {
    /**
     * @param {?} jsonSchema
     * @return {?}
     */
    toFieldConfig(jsonSchema) {
        return this._toFieldConfig(jsonSchema);
    }
    /**
     * @param {?} jsonSchema
     * @param {?=} key
     * @return {?}
     */
    _toFieldConfig(jsonSchema, key) {
        /** @type {?} */
        const field = Object.assign({}, (key ? { key } : {}), { type: /** @type {?} */ (jsonSchema.type), defaultValue: jsonSchema.default, templateOptions: {
                minLength: jsonSchema.minLength,
                maxLength: jsonSchema.maxLength,
                label: jsonSchema.title,
                readonly: jsonSchema.readOnly,
                pattern: jsonSchema.pattern,
                description: jsonSchema.description,
            } });
        if (jsonSchema.enum) {
            if (field.type === 'integer' || field.type === 'number') {
                field.parsers = [Number];
            }
            field.type = 'enum';
            field.templateOptions.options = jsonSchema.enum;
            field.templateOptions["labelProp"] = item => item;
            field.templateOptions["valueProp"] = item => item;
        }
        switch (jsonSchema.type) {
            case 'object': {
                field.fieldGroup = [];
                Object.keys(jsonSchema.properties).forEach(p => {
                    /** @type {?} */
                    const child = this._toFieldConfig(jsonSchema.properties[p], p);
                    if (Array.isArray(jsonSchema.required) && jsonSchema.required.indexOf(p) !== -1) {
                        child.templateOptions.required = true;
                    }
                    field.fieldGroup.push(child);
                });
                break;
            }
            case 'array': {
                if (!Array.isArray(jsonSchema.items)) {
                    field.fieldArray = this._toFieldConfig(/** @type {?} */ (jsonSchema.items));
                }
                else {
                    field['_fieldArray'] = [];
                    field.fieldGroup = [];
                    jsonSchema.items.forEach(item => field['_fieldArray'].push(this._toFieldConfig(item)));
                    if (jsonSchema.additionalItems) {
                        field['_additionalFieldArray'] = this._toFieldConfig(jsonSchema.additionalItems);
                    }
                    Object.defineProperty(field, 'fieldArray', {
                        get: () => {
                            return field['_fieldArray'][field.fieldGroup.length] || field['_additionalFieldArray'];
                        },
                        enumerable: true,
                        configurable: true,
                    });
                }
                break;
            }
        }
        return field;
    }
}
FormlyJsonschema.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] },
];
/** @nocollapse */ FormlyJsonschema.ngInjectableDef = i0.defineInjectable({ factory: function FormlyJsonschema_Factory() { return new FormlyJsonschema(); }, token: FormlyJsonschema, providedIn: "root" });

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWx5LWpzb24tc2NoZW1hLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LWZvcm1seS9jb3JlL2pzb24tc2NoZW1hLyIsInNvdXJjZXMiOlsiZm9ybWx5LWpzb24tc2NoZW1hLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBSzNDLE1BQU07Ozs7O0lBQ0osYUFBYSxDQUFDLFVBQXVCO1FBQ25DLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0tBQ3hDOzs7Ozs7SUFFRCxjQUFjLENBQUMsVUFBdUIsRUFBRSxHQUFZOztRQUNsRCxNQUFNLEtBQUsscUJBQ04sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUN2QixJQUFJLG9CQUFFLFVBQVUsQ0FBQyxJQUEyQixHQUM1QyxZQUFZLEVBQUUsVUFBVSxDQUFDLE9BQU8sRUFDaEMsZUFBZSxFQUFFO2dCQUNmLFNBQVMsRUFBRSxVQUFVLENBQUMsU0FBUztnQkFDL0IsU0FBUyxFQUFFLFVBQVUsQ0FBQyxTQUFTO2dCQUMvQixLQUFLLEVBQUUsVUFBVSxDQUFDLEtBQUs7Z0JBQ3ZCLFFBQVEsRUFBRSxVQUFVLENBQUMsUUFBUTtnQkFDN0IsT0FBTyxFQUFFLFVBQVUsQ0FBQyxPQUFPO2dCQUMzQixXQUFXLEVBQUUsVUFBVSxDQUFDLFdBQVc7YUFDcEMsSUFDRDtRQUVGLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ3BCLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssU0FBUyxJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFDeEQsS0FBSyxDQUFDLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQzFCO1lBQ0QsS0FBSyxDQUFDLElBQUksR0FBRyxNQUFNLENBQUM7WUFDcEIsS0FBSyxDQUFDLGVBQWUsQ0FBQyxPQUFPLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQztZQUNoRCxLQUFLLENBQUMsZUFBZSxnQkFBYSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQztZQUMvQyxLQUFLLENBQUMsZUFBZSxnQkFBYSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQztTQUNoRDtRQUVELE1BQU0sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ3hCLEtBQUssUUFBUSxFQUFFLENBQUM7Z0JBQ2QsS0FBSyxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUM7Z0JBQ3RCLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTs7b0JBQzdDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztvQkFDL0QsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUNoRixLQUFLLENBQUMsZUFBZSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7cUJBQ3ZDO29CQUNELEtBQUssQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUM5QixDQUFDLENBQUM7Z0JBQ0gsS0FBSyxDQUFDO2FBQ1A7WUFDRCxLQUFLLE9BQU8sRUFBRSxDQUFDO2dCQUNiLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNyQyxLQUFLLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxjQUFjLG1CQUFDLFVBQVUsQ0FBQyxLQUFvQixFQUFDLENBQUM7aUJBQ3pFO2dCQUFDLElBQUksQ0FBQyxDQUFDO29CQUNOLEtBQUssQ0FBQyxhQUFhLENBQUMsR0FBRyxFQUFFLENBQUM7b0JBQzFCLEtBQUssQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDO29CQUN0QixVQUFVLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ3ZGLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO3dCQUMvQixLQUFLLENBQUMsdUJBQXVCLENBQUMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsQ0FBQztxQkFDbEY7b0JBRUQsTUFBTSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsWUFBWSxFQUFFO3dCQUN6QyxHQUFHLEVBQUUsR0FBRyxFQUFFOzRCQUNSLE1BQU0sQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQzt5QkFDeEY7d0JBQ0QsVUFBVSxFQUFFLElBQUk7d0JBQ2hCLFlBQVksRUFBRSxJQUFJO3FCQUNuQixDQUFDLENBQUM7aUJBQ0o7Z0JBQ0QsS0FBSyxDQUFDO2FBQ1A7U0FDRjtRQUVELE1BQU0sQ0FBQyxLQUFLLENBQUM7S0FDZDs7O1lBbkVGLFVBQVUsU0FBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtbHlGaWVsZENvbmZpZyB9IGZyb20gJ0BuZ3gtZm9ybWx5L2NvcmUnO1xuaW1wb3J0IHsgSlNPTlNjaGVtYTcsIEpTT05TY2hlbWE3VHlwZU5hbWUgfSBmcm9tICdqc29uLXNjaGVtYSc7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgRm9ybWx5SnNvbnNjaGVtYSB7XG4gIHRvRmllbGRDb25maWcoanNvblNjaGVtYTogSlNPTlNjaGVtYTcpOiBGb3JtbHlGaWVsZENvbmZpZyB7XG4gICAgcmV0dXJuIHRoaXMuX3RvRmllbGRDb25maWcoanNvblNjaGVtYSk7XG4gIH1cblxuICBfdG9GaWVsZENvbmZpZyhqc29uU2NoZW1hOiBKU09OU2NoZW1hNywga2V5Pzogc3RyaW5nKTogRm9ybWx5RmllbGRDb25maWcge1xuICAgIGNvbnN0IGZpZWxkOiBGb3JtbHlGaWVsZENvbmZpZyA9IHtcbiAgICAgIC4uLihrZXkgPyB7IGtleSB9IDoge30pLFxuICAgICAgdHlwZToganNvblNjaGVtYS50eXBlIGFzIEpTT05TY2hlbWE3VHlwZU5hbWUsXG4gICAgICBkZWZhdWx0VmFsdWU6IGpzb25TY2hlbWEuZGVmYXVsdCxcbiAgICAgIHRlbXBsYXRlT3B0aW9uczoge1xuICAgICAgICBtaW5MZW5ndGg6IGpzb25TY2hlbWEubWluTGVuZ3RoLFxuICAgICAgICBtYXhMZW5ndGg6IGpzb25TY2hlbWEubWF4TGVuZ3RoLFxuICAgICAgICBsYWJlbDoganNvblNjaGVtYS50aXRsZSxcbiAgICAgICAgcmVhZG9ubHk6IGpzb25TY2hlbWEucmVhZE9ubHksXG4gICAgICAgIHBhdHRlcm46IGpzb25TY2hlbWEucGF0dGVybixcbiAgICAgICAgZGVzY3JpcHRpb246IGpzb25TY2hlbWEuZGVzY3JpcHRpb24sXG4gICAgICB9LFxuICAgIH07XG5cbiAgICBpZiAoanNvblNjaGVtYS5lbnVtKSB7XG4gICAgICBpZiAoZmllbGQudHlwZSA9PT0gJ2ludGVnZXInIHx8IGZpZWxkLnR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGZpZWxkLnBhcnNlcnMgPSBbTnVtYmVyXTtcbiAgICAgIH1cbiAgICAgIGZpZWxkLnR5cGUgPSAnZW51bSc7XG4gICAgICBmaWVsZC50ZW1wbGF0ZU9wdGlvbnMub3B0aW9ucyA9IGpzb25TY2hlbWEuZW51bTtcbiAgICAgIGZpZWxkLnRlbXBsYXRlT3B0aW9ucy5sYWJlbFByb3AgPSBpdGVtID0+IGl0ZW07XG4gICAgICBmaWVsZC50ZW1wbGF0ZU9wdGlvbnMudmFsdWVQcm9wID0gaXRlbSA9PiBpdGVtO1xuICAgIH1cblxuICAgIHN3aXRjaCAoanNvblNjaGVtYS50eXBlKSB7XG4gICAgICBjYXNlICdvYmplY3QnOiB7XG4gICAgICAgIGZpZWxkLmZpZWxkR3JvdXAgPSBbXTtcbiAgICAgICAgT2JqZWN0LmtleXMoanNvblNjaGVtYS5wcm9wZXJ0aWVzKS5mb3JFYWNoKHAgPT4ge1xuICAgICAgICAgIGNvbnN0IGNoaWxkID0gdGhpcy5fdG9GaWVsZENvbmZpZyhqc29uU2NoZW1hLnByb3BlcnRpZXNbcF0sIHApO1xuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGpzb25TY2hlbWEucmVxdWlyZWQpICYmIGpzb25TY2hlbWEucmVxdWlyZWQuaW5kZXhPZihwKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIGNoaWxkLnRlbXBsYXRlT3B0aW9ucy5yZXF1aXJlZCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZpZWxkLmZpZWxkR3JvdXAucHVzaChjaGlsZCk7XG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgJ2FycmF5Jzoge1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoanNvblNjaGVtYS5pdGVtcykpIHtcbiAgICAgICAgICBmaWVsZC5maWVsZEFycmF5ID0gdGhpcy5fdG9GaWVsZENvbmZpZyhqc29uU2NoZW1hLml0ZW1zIGFzIEpTT05TY2hlbWE3KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmaWVsZFsnX2ZpZWxkQXJyYXknXSA9IFtdO1xuICAgICAgICAgIGZpZWxkLmZpZWxkR3JvdXAgPSBbXTtcbiAgICAgICAgICBqc29uU2NoZW1hLml0ZW1zLmZvckVhY2goaXRlbSA9PiBmaWVsZFsnX2ZpZWxkQXJyYXknXS5wdXNoKHRoaXMuX3RvRmllbGRDb25maWcoaXRlbSkpKTtcbiAgICAgICAgICBpZiAoanNvblNjaGVtYS5hZGRpdGlvbmFsSXRlbXMpIHtcbiAgICAgICAgICAgIGZpZWxkWydfYWRkaXRpb25hbEZpZWxkQXJyYXknXSA9IHRoaXMuX3RvRmllbGRDb25maWcoanNvblNjaGVtYS5hZGRpdGlvbmFsSXRlbXMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmaWVsZCwgJ2ZpZWxkQXJyYXknLCB7XG4gICAgICAgICAgICBnZXQ6ICgpID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZpZWxkWydfZmllbGRBcnJheSddW2ZpZWxkLmZpZWxkR3JvdXAubGVuZ3RoXSB8fCBmaWVsZFsnX2FkZGl0aW9uYWxGaWVsZEFycmF5J107XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmllbGQ7XG4gIH1cbn1cbiJdfQ==