/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { FormGroup, FormArray } from '@angular/forms';
import { isObject, isNullOrUndefined, isFunction, FORMLY_VALIDATORS, getFieldValue, getKeyPath, removeFieldControl, } from '../../utils';
import { evalExpression, evalStringExpression, evalExpressionValueSetter } from './utils';
import { Observable } from 'rxjs';
import { tap } from 'rxjs/operators';
export class FieldExpressionExtension {
    /**
     * @param {?} field
     * @return {?}
     */
    onPopulate(field) {
        if (field._expressionProperties) {
            return;
        }
        // cache built expression
        field._expressionProperties = field._expressionProperties || {};
        if (field.expressionProperties) {
            for (const key in field.expressionProperties) {
                /** @type {?} */
                const expressionProperty = field.expressionProperties[key];
                /** @type {?} */
                const expressionValueSetter = evalExpressionValueSetter(`field.${key}`, ['expressionValue', 'model', 'field']);
                if (typeof expressionProperty === 'string' || isFunction(expressionProperty)) {
                    field._expressionProperties[key] = {
                        expression: this._evalExpression(expressionProperty, field.parent.expressionProperties && field.parent.expressionProperties.hasOwnProperty('templateOptions.disabled')
                            ? () => field.parent.templateOptions.disabled
                            : undefined),
                        expressionValueSetter,
                    };
                    if (key === 'templateOptions.disabled') {
                        Object.defineProperty(field._expressionProperties[key], 'expressionValue', {
                            get: () => field.templateOptions.disabled,
                            set: () => { },
                            enumerable: true,
                            configurable: true,
                        });
                    }
                }
                else if (expressionProperty instanceof Observable) {
                    /** @type {?} */
                    const subscription = (/** @type {?} */ (expressionProperty)).pipe(tap(v => evalExpression(expressionValueSetter, { field }, [v, field.model, field]))).subscribe();
                    /** @type {?} */
                    const onDestroy = field.lifecycle.onDestroy;
                    field.lifecycle.onDestroy = (...args) => {
                        if (onDestroy) {
                            onDestroy(...args);
                        }
                        subscription.unsubscribe();
                    };
                }
            }
        }
        if (field.hideExpression || field.parent.hideExpression) {
            // delete hide value in order to force re-evaluate it in FormlyFormExpression.
            delete field.hide;
            field.hideExpression = this._evalExpression(field.hideExpression, field.parent && field.parent.hideExpression ? () => field.parent.hide : undefined);
        }
        if (!field.options._checkField) {
            field.options._checkField = (f) => this._checkField(f);
        }
    }
    /**
     * @param {?} expression
     * @param {?=} parentExpression
     * @return {?}
     */
    _evalExpression(expression, parentExpression) {
        expression = expression || (() => false);
        if (typeof expression === 'string') {
            expression = evalStringExpression(expression, ['model', 'formState']);
        }
        return parentExpression
            ? (model, formState) => parentExpression() || expression(model, formState)
            : expression;
    }
    /**
     * @param {?} field
     * @return {?}
     */
    _checkField(field) {
        field.fieldGroup.forEach(f => {
            this.checkFieldExpressionChange(f);
            this.checkFieldVisibilityChange(f);
            if (f.fieldGroup && f.fieldGroup.length > 0) {
                this._checkField(f);
            }
        });
    }
    /**
     * @param {?} field
     * @return {?}
     */
    checkFieldExpressionChange(field) {
        if (!field || !field._expressionProperties) {
            return;
        }
        /** @type {?} */
        const expressionProperties = field._expressionProperties;
        /** @type {?} */
        const validators = FORMLY_VALIDATORS.map(v => `templateOptions.${v}`);
        for (const key in expressionProperties) {
            /** @type {?} */
            let expressionValue = evalExpression(expressionProperties[key].expression, { field }, [field.model, field.options.formState]);
            if (key === 'templateOptions.disabled') {
                expressionValue = expressionValue || false;
            }
            if (expressionProperties[key].expressionValue !== expressionValue
                && (!isObject(expressionValue) || JSON.stringify(expressionValue) !== JSON.stringify(expressionProperties[key].expressionValue))) {
                expressionProperties[key].expressionValue = expressionValue;
                evalExpression(expressionProperties[key].expressionValueSetter, { field }, [expressionValue, field.model, field]);
                if (key.indexOf('model.') === 0) {
                    /** @type {?} */
                    const path = key.replace(/^model\./, '');
                    /** @type {?} */
                    const control = field.key && key === path ? field.formControl : field.parent.formControl.get(path);
                    if (control
                        && !(isNullOrUndefined(control.value) && isNullOrUndefined(expressionValue))
                        && control.value !== expressionValue) {
                        control.patchValue(expressionValue);
                    }
                }
                if (validators.indexOf(key) !== -1 && field.formControl) {
                    field.formControl.updateValueAndValidity({ emitEvent: false });
                }
            }
        }
    }
    /**
     * @param {?} field
     * @return {?}
     */
    checkFieldVisibilityChange(field) {
        if (!field || isNullOrUndefined(field.hideExpression)) {
            return;
        }
        /** @type {?} */
        const hideExpressionResult = !!evalExpression(field.hideExpression, { field }, [field.model, field.options.formState]);
        if (hideExpressionResult !== field.hide) {
            // toggle hide
            field.hide = hideExpressionResult;
            field.templateOptions.hidden = hideExpressionResult;
            if (field.formControl && field.key) {
                /** @type {?} */
                const parent = this.fieldParentFormControl(field);
                if (parent) {
                    /** @type {?} */
                    const control = parent.get(`${this.fieldKey(field)}`);
                    if (hideExpressionResult === true && control) {
                        removeFieldControl(parent, this.fieldKey(field));
                    }
                    else if (hideExpressionResult === false && !control) {
                        this.addFieldControl(parent, field);
                    }
                }
            }
            if (field.options.fieldChanges) {
                field.options.fieldChanges.next(/** @type {?} */ ({ field: field, type: 'hidden', value: hideExpressionResult }));
            }
        }
    }
    /**
     * @param {?} parent
     * @param {?} field
     * @return {?}
     */
    addFieldControl(parent, field) {
        /** @type {?} */
        const fieldModel = getFieldValue(field);
        if (!(isNullOrUndefined(field.formControl.value) && isNullOrUndefined(fieldModel))
            && field.formControl.value !== fieldModel) {
            field.formControl.patchValue(fieldModel, { emitEvent: false });
        }
        if (parent instanceof FormArray) {
            parent.push(field.formControl);
        }
        else if (parent instanceof FormGroup) {
            parent.addControl(`${this.fieldKey(field)}`, field.formControl);
        }
    }
    /**
     * @param {?} field
     * @return {?}
     */
    fieldParentFormControl(field) {
        /** @type {?} */
        const paths = getKeyPath(field);
        paths.pop(); // remove last path
        return /** @type {?} */ ((paths.length > 0 ? field.parent.formControl.get(paths) : field.parent.formControl));
    }
    /**
     * @param {?} field
     * @return {?}
     */
    fieldKey(field) {
        return getKeyPath(field).pop();
    }
}

//# sourceMappingURL=data:application/json;base64,