/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Directive, HostListener, ElementRef, Input, Renderer2 } from '@angular/core';
export class FormlyAttributes {
    /**
     * @param {?} renderer
     * @param {?} elementRef
     */
    constructor(renderer, elementRef) {
        this.renderer = renderer;
        this.elementRef = elementRef;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onFocus($event) {
        this.field.focus = true;
        if (this.to.focus) {
            this.to.focus(this.field, $event);
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onBlur($event) {
        this.field.focus = false;
        if (this.to.blur) {
            this.to.blur(this.field, $event);
        }
    }
    /**
     * @return {?}
     */
    get to() {
        return this.field.templateOptions || {};
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes["field"]) {
            /** @type {?} */
            const fieldChanges = changes["field"];
            this.renderer.setAttribute(this.elementRef.nativeElement, 'id', this.field.id);
            if (this.to && this.to.attributes) {
                this.setAttributes(this.to.attributes);
                Object.defineProperty(this.to, 'attributes', {
                    get: () => this.to["__attributes__"],
                    set: attributes => this.setAttributes(attributes),
                    enumerable: true,
                    configurable: true,
                });
            }
            if ((fieldChanges.previousValue || {}).focus !== (fieldChanges.currentValue || {}).focus && this.elementRef.nativeElement.focus) {
                this.elementRef.nativeElement[this.field.focus ? 'focus' : 'blur']();
            }
        }
    }
    /**
     * @param {?} attributes
     * @return {?}
     */
    setAttributes(attributes) {
        if (this.to["__attributes__"] && this.to["__attributes__"] !== attributes) {
            Object.keys(this.to["__attributes__"]).forEach(name => this.renderer.removeAttribute(this.elementRef.nativeElement, name));
        }
        this.to["__attributes__"] = attributes;
        Object.keys(attributes).forEach(name => this.renderer.setAttribute(this.elementRef.nativeElement, name, /** @type {?} */ (attributes[name])));
    }
}
FormlyAttributes.decorators = [
    { type: Directive, args: [{
                selector: '[formlyAttributes]',
                host: {
                    '[attr.name]': 'field.name',
                    '[attr.placeholder]': 'to.placeholder',
                    '[attr.tabindex]': 'to.tabindex',
                    '[attr.readonly]': 'to.readonly',
                    '[attr.step]': 'to.step',
                    '(keyup)': 'to.keyup && to.keyup(field, $event)',
                    '(keydown)': 'to.keydown && to.keydown(field, $event)',
                    '(click)': 'to.click && to.click(field, $event)',
                    '(change)': 'to.change && to.change(field, $event)',
                    '(keypress)': 'to.keypress && to.keypress(field, $event)',
                },
            },] },
];
/** @nocollapse */
FormlyAttributes.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
FormlyAttributes.propDecorators = {
    field: [{ type: Input, args: ['formlyAttributes',] }],
    onFocus: [{ type: HostListener, args: ['focus', ['$event'],] }],
    onBlur: [{ type: HostListener, args: ['blur', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    FormlyAttributes.prototype.field;
    /** @type {?} */
    FormlyAttributes.prototype.renderer;
    /** @type {?} */
    FormlyAttributes.prototype.elementRef;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWx5LmF0dHJpYnV0ZXMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LWZvcm1seS9jb3JlLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvZm9ybWx5LmF0dHJpYnV0ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQTRCLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQW1CaEgsTUFBTTs7Ozs7SUFxQkosWUFDVSxVQUNBO1FBREEsYUFBUSxHQUFSLFFBQVE7UUFDUixlQUFVLEdBQVYsVUFBVTtLQUNoQjs7Ozs7SUFyQitCLE9BQU8sQ0FBQyxNQUFNO1FBQy9DLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUN4QixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDbEIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztTQUNuQztLQUNGOzs7OztJQUVpQyxNQUFNLENBQUMsTUFBTTtRQUM3QyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDekIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ2pCLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDbEM7S0FDRjs7OztJQUVELElBQUksRUFBRTtRQUNKLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGVBQWUsSUFBSSxFQUFFLENBQUM7S0FDekM7Ozs7O0lBT0QsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sV0FBUSxDQUFDOztZQUNsQixNQUFNLFlB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dExpc3RlbmVyLCBFbGVtZW50UmVmLCBJbnB1dCwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1seUZpZWxkQ29uZmlnLCBGb3JtbHlUZW1wbGF0ZU9wdGlvbnMgfSBmcm9tICcuL2Zvcm1seS5maWVsZC5jb25maWcnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbZm9ybWx5QXR0cmlidXRlc10nLFxuICBob3N0OiB7XG4gICAgJ1thdHRyLm5hbWVdJzogJ2ZpZWxkLm5hbWUnLFxuICAgICdbYXR0ci5wbGFjZWhvbGRlcl0nOiAndG8ucGxhY2Vob2xkZXInLFxuICAgICdbYXR0ci50YWJpbmRleF0nOiAndG8udGFiaW5kZXgnLFxuICAgICdbYXR0ci5yZWFkb25seV0nOiAndG8ucmVhZG9ubHknLFxuICAgICdbYXR0ci5zdGVwXSc6ICd0by5zdGVwJyxcblxuICAgICcoa2V5dXApJzogJ3RvLmtleXVwICYmIHRvLmtleXVwKGZpZWxkLCAkZXZlbnQpJyxcbiAgICAnKGtleWRvd24pJzogJ3RvLmtleWRvd24gJiYgdG8ua2V5ZG93bihmaWVsZCwgJGV2ZW50KScsXG4gICAgJyhjbGljayknOiAndG8uY2xpY2sgJiYgdG8uY2xpY2soZmllbGQsICRldmVudCknLFxuICAgICcoY2hhbmdlKSc6ICd0by5jaGFuZ2UgJiYgdG8uY2hhbmdlKGZpZWxkLCAkZXZlbnQpJyxcbiAgICAnKGtleXByZXNzKSc6ICd0by5rZXlwcmVzcyAmJiB0by5rZXlwcmVzcyhmaWVsZCwgJGV2ZW50KScsXG4gIH0sXG59KVxuZXhwb3J0IGNsYXNzIEZvcm1seUF0dHJpYnV0ZXMgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICBASW5wdXQoJ2Zvcm1seUF0dHJpYnV0ZXMnKSBmaWVsZDogRm9ybWx5RmllbGRDb25maWc7XG5cbiAgQEhvc3RMaXN0ZW5lcignZm9jdXMnLCBbJyRldmVudCddKSBvbkZvY3VzKCRldmVudCkge1xuICAgIHRoaXMuZmllbGQuZm9jdXMgPSB0cnVlO1xuICAgIGlmICh0aGlzLnRvLmZvY3VzKSB7XG4gICAgICB0aGlzLnRvLmZvY3VzKHRoaXMuZmllbGQsICRldmVudCk7XG4gICAgfVxuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignYmx1cicsIFsnJGV2ZW50J10pIG9uQmx1cigkZXZlbnQpIHtcbiAgICB0aGlzLmZpZWxkLmZvY3VzID0gZmFsc2U7XG4gICAgaWYgKHRoaXMudG8uYmx1cikge1xuICAgICAgdGhpcy50by5ibHVyKHRoaXMuZmllbGQsICRldmVudCk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IHRvKCk6IEZvcm1seVRlbXBsYXRlT3B0aW9ucyB7XG4gICAgcmV0dXJuIHRoaXMuZmllbGQudGVtcGxhdGVPcHRpb25zIHx8IHt9O1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgKSB7fVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBpZiAoY2hhbmdlcy5maWVsZCkge1xuICAgICAgY29uc3QgZmllbGRDaGFuZ2VzID0gY2hhbmdlcy5maWVsZDtcblxuICAgICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICdpZCcsIHRoaXMuZmllbGQuaWQpO1xuICAgICAgaWYgKHRoaXMudG8gJiYgdGhpcy50by5hdHRyaWJ1dGVzKSB7XG4gICAgICAgIHRoaXMuc2V0QXR0cmlidXRlcyh0aGlzLnRvLmF0dHJpYnV0ZXMpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy50bywgJ2F0dHJpYnV0ZXMnLCB7XG4gICAgICAgICAgZ2V0OiAoKSA9PiB0aGlzLnRvLl9fYXR0cmlidXRlc19fLFxuICAgICAgICAgIHNldDogYXR0cmlidXRlcyA9PiB0aGlzLnNldEF0dHJpYnV0ZXMoYXR0cmlidXRlcyksXG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoKGZpZWxkQ2hhbmdlcy5wcmV2aW91c1ZhbHVlIHx8IHt9KS5mb2N1cyAhPT0gKGZpZWxkQ2hhbmdlcy5jdXJyZW50VmFsdWUgfHwge30pLmZvY3VzICYmIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmZvY3VzKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50W3RoaXMuZmllbGQuZm9jdXMgPyAnZm9jdXMnIDogJ2JsdXInXSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc2V0QXR0cmlidXRlcyhhdHRyaWJ1dGVzKSB7XG4gICAgaWYgKHRoaXMudG8uX19hdHRyaWJ1dGVzX18gJiYgdGhpcy50by5fX2F0dHJpYnV0ZXNfXyAhPT0gYXR0cmlidXRlcykge1xuICAgICAgT2JqZWN0LmtleXModGhpcy50by5fX2F0dHJpYnV0ZXNfXykuZm9yRWFjaChuYW1lID0+IHRoaXMucmVuZGVyZXIucmVtb3ZlQXR0cmlidXRlKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCBuYW1lKSk7XG4gICAgfVxuXG4gICAgdGhpcy50by5fX2F0dHJpYnV0ZXNfXyA9IGF0dHJpYnV0ZXM7XG4gICAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChuYW1lID0+IHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKFxuICAgICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsIG5hbWUsIGF0dHJpYnV0ZXNbbmFtZV0gYXMgc3RyaW5nLFxuICAgICkpO1xuICB9XG59XG4iXX0=