/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output, ViewContainerRef, ViewChild, } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { FormlyConfig } from '../services/formly.config';
export class FormlyField {
    /**
     * @param {?} formlyConfig
     */
    constructor(formlyConfig) {
        this.formlyConfig = formlyConfig;
        this.options = {};
        this.modelChange = new EventEmitter();
        this.componentRefs = [];
    }
    /**
     * @param {?} m
     * @return {?}
     */
    set model(m) {
        console.warn(`NgxFormly: passing 'model' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.lifeCycleHooks(this.lifecycle.afterContentInit);
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
        this.lifeCycleHooks(this.lifecycle.afterContentChecked);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.lifeCycleHooks(this.lifecycle.afterViewInit);
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
        this.lifeCycleHooks(this.lifecycle.afterViewChecked);
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        this.lifeCycleHooks(this.lifecycle.doCheck);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.lifeCycleHooks(this.lifecycle.onInit);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes["field"]) {
            this.renderField(this.field, this.containerRef);
        }
        this.lifeCycleHooks(this.lifecycle.onChanges);
        this.componentRefs.forEach(ref => {
            Object.assign(ref.instance, {
                form: this.form,
                field: this.field,
                options: this.options,
            });
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.lifeCycleHooks(this.lifecycle.onDestroy);
        this.componentRefs.forEach(componentRef => componentRef.destroy());
        this.componentRefs = [];
    }
    /**
     * @param {?} field
     * @param {?} containerRef
     * @return {?}
     */
    renderField(field, containerRef) {
        this.componentRefs.forEach(componentRef => componentRef.destroy());
        this.componentRefs = [];
        /** @type {?} */
        const wrappers = /** @type {?} */ ((field.wrappers || []).map(wrapperName => this.formlyConfig.getWrapper(wrapperName)));
        [...wrappers, this.formlyConfig.getType(field.type)].forEach(({ componentFactoryResolver, component }) => {
            /** @type {?} */
            const ref = containerRef.createComponent(componentFactoryResolver.resolveComponentFactory(component));
            Object.assign(ref.instance, { form: this.form, options: this.options, field });
            this.componentRefs.push(ref);
            containerRef = ref.instance.fieldComponent;
        });
    }
    /**
     * @return {?}
     */
    get lifecycle() {
        return this.field.lifecycle || {};
    }
    /**
     * @param {?} callback
     * @return {?}
     */
    lifeCycleHooks(callback) {
        if (callback) {
            callback(this.form, this.field, this.field.model, this.options);
        }
    }
}
FormlyField.decorators = [
    { type: Component, args: [{
                selector: 'formly-field',
                template: `<ng-template #container></ng-template>`,
                host: {
                    '[style.display]': 'field.hide ? "none":""',
                },
            },] },
];
/** @nocollapse */
FormlyField.ctorParameters = () => [
    { type: FormlyConfig }
];
FormlyField.propDecorators = {
    model: [{ type: Input }],
    form: [{ type: Input }],
    field: [{ type: Input }],
    options: [{ type: Input }],
    modelChange: [{ type: Output }],
    containerRef: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }]
};
if (false) {
    /** @type {?} */
    FormlyField.prototype.form;
    /** @type {?} */
    FormlyField.prototype.field;
    /** @type {?} */
    FormlyField.prototype.options;
    /** @type {?} */
    FormlyField.prototype.modelChange;
    /** @type {?} */
    FormlyField.prototype.containerRef;
    /** @type {?} */
    FormlyField.prototype.componentRefs;
    /** @type {?} */
    FormlyField.prototype.formlyConfig;
}

//# sourceMappingURL=data:application/json;base64,