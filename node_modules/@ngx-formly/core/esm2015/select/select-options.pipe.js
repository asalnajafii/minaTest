/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { Observable, of as observableOf } from 'rxjs';
import { map } from 'rxjs/operators';
export class FormlySelectOptionsPipe {
    /**
     * @param {?} options
     * @param {?=} field
     * @return {?}
     */
    transform(options, field) {
        if (!(options instanceof Observable)) {
            options = observableOf(options);
        }
        return (/** @type {?} */ (options)).pipe(map(value => this.toOptions(value, field || {})));
    }
    /**
     * @param {?} options
     * @param {?} field
     * @return {?}
     */
    toOptions(options, field) {
        /** @type {?} */
        const gOptions = [];
        /** @type {?} */
        const groups = {};
        /** @type {?} */
        const to = field.templateOptions || {};
        options.map((option) => {
            if (!this.getGroupProp(option, to)) {
                gOptions.push(this.toOption(option, to));
            }
            else {
                if (!groups[this.getGroupProp(option, to)]) {
                    groups[this.getGroupProp(option, to)] = [];
                    gOptions.push({
                        label: this.getGroupProp(option, to),
                        group: groups[this.getGroupProp(option, to)],
                    });
                }
                groups[this.getGroupProp(option, to)].push(this.toOption(option, to));
            }
        });
        return gOptions;
    }
    /**
     * @param {?} item
     * @param {?} to
     * @return {?}
     */
    toOption(item, to) {
        return {
            label: this.getLabelProp(item, to),
            value: this.getValueProp(item, to),
        };
    }
    /**
     * @param {?} item
     * @param {?} to
     * @return {?}
     */
    getLabelProp(item, to) {
        if (typeof to.labelProp === 'function') {
            return to.labelProp(item);
        }
        if (this.shouldUseLegacyOption(item, to)) {
            return item.value;
        }
        return item[to.labelProp || 'label'];
    }
    /**
     * @param {?} item
     * @param {?} to
     * @return {?}
     */
    getValueProp(item, to) {
        if (typeof to.valueProp === 'function') {
            return to.valueProp(item);
        }
        if (this.shouldUseLegacyOption(item, to)) {
            return item.key;
        }
        return item[to.valueProp || 'value'];
    }
    /**
     * @param {?} item
     * @param {?} to
     * @return {?}
     */
    getGroupProp(item, to) {
        if (typeof to.groupProp === 'function') {
            return to.groupProp(item);
        }
        return item[to.groupProp || 'group'];
    }
    /**
     * @param {?} item
     * @param {?} to
     * @return {?}
     */
    shouldUseLegacyOption(item, to) {
        return !to.valueProp
            && !to.labelProp
            && item != null
            && typeof item === 'object'
            && 'key' in item
            && 'value' in item;
    }
}
FormlySelectOptionsPipe.decorators = [
    { type: Pipe, args: [{ name: 'formlySelectOptions' },] },
];

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LW9wdGlvbnMucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtZm9ybWx5L2NvcmUvc2VsZWN0LyIsInNvdXJjZXMiOlsic2VsZWN0LW9wdGlvbnMucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxFQUFFLElBQUksWUFBWSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUlyQyxNQUFNOzs7Ozs7SUFDSixTQUFTLENBQUMsT0FBTyxFQUFFLEtBQXlCO1FBQzFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLFlBQVksVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3JDLE9BQU8sR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDakM7UUFFRCxNQUFNLENBQUMsbUJBQUMsT0FBMEIsRUFBQyxDQUFDLElBQUksQ0FDdEMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQ2pELENBQUM7S0FDSDs7Ozs7O0lBRU8sU0FBUyxDQUFDLE9BQU8sRUFBRSxLQUF3Qjs7UUFDakQsTUFBTSxRQUFRLEdBQVUsRUFBRSxDQUVTOztRQUZuQyxNQUNFLE1BQU0sR0FBNkIsRUFBRSxDQUNKOztRQUZuQyxNQUVFLEVBQUUsR0FBRyxLQUFLLENBQUMsZUFBZSxJQUFJLEVBQUUsQ0FBQztRQUVuQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBVyxFQUFFLEVBQUU7WUFDMUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ25DLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQzthQUMxQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNOLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUMzQyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7b0JBQzNDLFFBQVEsQ0FBQyxJQUFJLENBQUM7d0JBQ1osS0FBSyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQzt3QkFDcEMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztxQkFDN0MsQ0FBQyxDQUFDO2lCQUNKO2dCQUNELE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQ3ZFO1NBQ0YsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDLFFBQVEsQ0FBQzs7Ozs7OztJQUdWLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRTtRQUN2QixNQUFNLENBQUM7WUFDTCxLQUFLLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDO1lBQ2xDLEtBQUssRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUM7U0FDbkMsQ0FBQzs7Ozs7OztJQUdJLFlBQVksQ0FBQyxJQUFJLEVBQUUsRUFBRTtRQUMzQixFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxTQUFTLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQztZQUN2QyxNQUFNLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUMzQjtRQUVELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3pDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1NBQ25CO1FBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxJQUFJLE9BQU8sQ0FBQyxDQUFDOzs7Ozs7O0lBRy9CLFlBQVksQ0FBQyxJQUFJLEVBQUUsRUFBRTtRQUMzQixFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxTQUFTLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQztZQUN2QyxNQUFNLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUMzQjtRQUVELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3pDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO1NBQ2pCO1FBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxJQUFJLE9BQU8sQ0FBQyxDQUFDOzs7Ozs7O0lBRy9CLFlBQVksQ0FBQyxJQUFJLEVBQUUsRUFBRTtRQUMzQixFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxTQUFTLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQztZQUN2QyxNQUFNLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUMzQjtRQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsSUFBSSxPQUFPLENBQUMsQ0FBQzs7Ozs7OztJQUcvQixxQkFBcUIsQ0FBQyxJQUFJLEVBQUUsRUFBRTtRQUNwQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUztlQUNmLENBQUMsRUFBRSxDQUFDLFNBQVM7ZUFDYixJQUFJLElBQUksSUFBSTtlQUNaLE9BQU8sSUFBSSxLQUFLLFFBQVE7ZUFDeEIsS0FBSyxJQUFJLElBQUk7ZUFDYixPQUFPLElBQUksSUFBSSxDQUFDOzs7O1lBaEZ4QixJQUFJLFNBQUMsRUFBRSxJQUFJLEVBQUUscUJBQXFCLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiBhcyBvYnNlcnZhYmxlT2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEZvcm1seUZpZWxkQ29uZmlnIH0gZnJvbSAnQG5neC1mb3JtbHkvY29yZSc7XG5cbkBQaXBlKHsgbmFtZTogJ2Zvcm1seVNlbGVjdE9wdGlvbnMnIH0pXG5leHBvcnQgY2xhc3MgRm9ybWx5U2VsZWN0T3B0aW9uc1BpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgdHJhbnNmb3JtKG9wdGlvbnMsIGZpZWxkPzogRm9ybWx5RmllbGRDb25maWcpIHtcbiAgICBpZiAoIShvcHRpb25zIGluc3RhbmNlb2YgT2JzZXJ2YWJsZSkpIHtcbiAgICAgIG9wdGlvbnMgPSBvYnNlcnZhYmxlT2Yob3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIChvcHRpb25zIGFzIE9ic2VydmFibGU8YW55PikucGlwZShcbiAgICAgIG1hcCh2YWx1ZSA9PiB0aGlzLnRvT3B0aW9ucyh2YWx1ZSwgZmllbGQgfHwge30pKSxcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSB0b09wdGlvbnMob3B0aW9ucywgZmllbGQ6IEZvcm1seUZpZWxkQ29uZmlnKSB7XG4gICAgY29uc3QgZ09wdGlvbnM6IGFueVtdID0gW10sXG4gICAgICBncm91cHM6IHsgW2tleTogc3RyaW5nXTogYW55W10gfSA9IHt9LFxuICAgICAgdG8gPSBmaWVsZC50ZW1wbGF0ZU9wdGlvbnMgfHwge307XG5cbiAgICBvcHRpb25zLm1hcCgob3B0aW9uOiBhbnkpID0+IHtcbiAgICAgIGlmICghdGhpcy5nZXRHcm91cFByb3Aob3B0aW9uLCB0bykpIHtcbiAgICAgICAgZ09wdGlvbnMucHVzaCh0aGlzLnRvT3B0aW9uKG9wdGlvbiwgdG8pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghZ3JvdXBzW3RoaXMuZ2V0R3JvdXBQcm9wKG9wdGlvbiwgdG8pXSkge1xuICAgICAgICAgIGdyb3Vwc1t0aGlzLmdldEdyb3VwUHJvcChvcHRpb24sIHRvKV0gPSBbXTtcbiAgICAgICAgICBnT3B0aW9ucy5wdXNoKHtcbiAgICAgICAgICAgIGxhYmVsOiB0aGlzLmdldEdyb3VwUHJvcChvcHRpb24sIHRvKSxcbiAgICAgICAgICAgIGdyb3VwOiBncm91cHNbdGhpcy5nZXRHcm91cFByb3Aob3B0aW9uLCB0byldLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGdyb3Vwc1t0aGlzLmdldEdyb3VwUHJvcChvcHRpb24sIHRvKV0ucHVzaCh0aGlzLnRvT3B0aW9uKG9wdGlvbiwgdG8pKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBnT3B0aW9ucztcbiAgfVxuXG4gIHByaXZhdGUgdG9PcHRpb24oaXRlbSwgdG8pIHtcbiAgICByZXR1cm4ge1xuICAgICAgbGFiZWw6IHRoaXMuZ2V0TGFiZWxQcm9wKGl0ZW0sIHRvKSxcbiAgICAgIHZhbHVlOiB0aGlzLmdldFZhbHVlUHJvcChpdGVtLCB0byksXG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0TGFiZWxQcm9wKGl0ZW0sIHRvKTogc3RyaW5nIHtcbiAgICBpZiAodHlwZW9mIHRvLmxhYmVsUHJvcCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIHRvLmxhYmVsUHJvcChpdGVtKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5zaG91bGRVc2VMZWdhY3lPcHRpb24oaXRlbSwgdG8pKSB7XG4gICAgICByZXR1cm4gaXRlbS52YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gaXRlbVt0by5sYWJlbFByb3AgfHwgJ2xhYmVsJ107XG4gIH1cblxuICBwcml2YXRlIGdldFZhbHVlUHJvcChpdGVtLCB0byk6IHN0cmluZyB7XG4gICAgaWYgKHR5cGVvZiB0by52YWx1ZVByb3AgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiB0by52YWx1ZVByb3AoaXRlbSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc2hvdWxkVXNlTGVnYWN5T3B0aW9uKGl0ZW0sIHRvKSkge1xuICAgICAgcmV0dXJuIGl0ZW0ua2V5O1xuICAgIH1cblxuICAgIHJldHVybiBpdGVtW3RvLnZhbHVlUHJvcCB8fCAndmFsdWUnXTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0R3JvdXBQcm9wKGl0ZW0sIHRvKTogc3RyaW5nIHtcbiAgICBpZiAodHlwZW9mIHRvLmdyb3VwUHJvcCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIHRvLmdyb3VwUHJvcChpdGVtKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaXRlbVt0by5ncm91cFByb3AgfHwgJ2dyb3VwJ107XG4gIH1cblxuICBwcml2YXRlIHNob3VsZFVzZUxlZ2FjeU9wdGlvbihpdGVtLCB0bykge1xuICAgIHJldHVybiAhdG8udmFsdWVQcm9wXG4gICAgICAmJiAhdG8ubGFiZWxQcm9wXG4gICAgICAmJiBpdGVtICE9IG51bGxcbiAgICAgICYmIHR5cGVvZiBpdGVtID09PSAnb2JqZWN0J1xuICAgICAgJiYgJ2tleScgaW4gaXRlbVxuICAgICAgJiYgJ3ZhbHVlJyBpbiBpdGVtO1xuICB9XG59XG4iXX0=