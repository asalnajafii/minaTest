{"version":3,"file":"ngx-formly-core.js.map","sources":["ng://@ngx-formly/core/lib/utils.ts","ng://@ngx-formly/core/lib/services/formly.config.ts","ng://@ngx-formly/core/lib/services/formly.form.builder.ts","ng://@ngx-formly/core/lib/components/formly.form.ts","ng://@ngx-formly/core/lib/components/formly.field.ts","ng://@ngx-formly/core/lib/components/formly.attributes.ts","ng://@ngx-formly/core/lib/templates/field.type.ts","ng://@ngx-formly/core/lib/templates/field-array.type.ts","ng://@ngx-formly/core/lib/templates/field.wrapper.ts","ng://@ngx-formly/core/lib/components/formly.group.ts","ng://@ngx-formly/core/lib/templates/formly.validation-message.ts","ng://@ngx-formly/core/lib/extensions/field-expression/utils.ts","ng://@ngx-formly/core/lib/extensions/field-expression/field-expression.ts","ng://@ngx-formly/core/lib/templates/field-template.type.ts","ng://@ngx-formly/core/lib/core.module.ts"],"sourcesContent":["import { FormlyFieldConfig } from './core';\nimport { Observable } from 'rxjs';\nimport { AbstractControl, FormArray, FormGroup } from '@angular/forms';\n\nexport function getFieldId(formId: string, field: FormlyFieldConfig, index: string|number) {\n  if (field.id) return field.id;\n  let type = field.type;\n  if (!type && field.template) type = 'template';\n  return [formId, type, field.key, index].join('_');\n}\n\nexport function getKeyPath(field: {key?: string|string[], fieldGroup?: any, fieldArray?: any}): (string|number)[] {\n  /* We store the keyPath in the field for performance reasons. This function will be called frequently. */\n  if (!(<any> field)['_formlyKeyPath'] || (<any> field)['_formlyKeyPath'].key !== field.key) {\n    let keyPath: (string|number)[] = [];\n    if (field.key) {\n      /* Also allow for an array key, hence the type check  */\n      let pathElements = typeof field.key === 'string' ? field.key.split('.') : field.key;\n      for (let pathElement of pathElements) {\n        if (typeof pathElement === 'string') {\n          /* replace paths of the form names[2] by names.2, cfr. angular formly */\n          pathElement = pathElement.replace(/\\[(\\w+)\\]/g, '.$1');\n          keyPath = keyPath.concat(pathElement.split('.'));\n        } else {\n          keyPath.push(pathElement);\n        }\n      }\n      for (let i = 0; i < keyPath.length; i++) {\n        let pathElement = keyPath[i];\n        if (typeof pathElement === 'string' && /^\\d+$/.test(pathElement))  {\n          keyPath[i] = parseInt(pathElement);\n        }\n      }\n    }\n    (<any> field)['_formlyKeyPath'] = {\n      key: field.key,\n      path: keyPath,\n    };\n  }\n\n  return (<any> field)['_formlyKeyPath'].path.slice(0);\n}\n\nexport const FORMLY_VALIDATORS = ['required', 'pattern', 'minLength', 'maxLength', 'min', 'max'];\n\nexport function assignModelValue(model: any, path: string | (string | number)[], value: any) {\n  if (typeof path === 'string') {\n    path = getKeyPath({key: path});\n  }\n\n  if (path.length > 1) {\n    const e = path.shift();\n    if (!model[e] || !isObject(model[e])) {\n      model[e] = typeof path[0] === 'string' ? {} : [];\n    }\n    assignModelValue(model[e], path, value);\n  } else {\n    model[path[0]] = value;\n  }\n}\n\nexport function getFieldValue(field: FormlyFieldConfig): any {\n  const paths = getKeyPath(field);\n  let model = field.parent.model;\n  while (model && paths.length > 0) {\n    const e = paths.shift();\n    model = model[e];\n  }\n\n  return model;\n}\n\nexport function getKey(controlKey: string, actualKey: string) {\n  return actualKey ? actualKey + '.' + controlKey : controlKey;\n}\n\nexport function reverseDeepMerge(dest: any, ...args: any[]) {\n  args.forEach(src => {\n    for (let srcArg in src) {\n      if (isNullOrUndefined(dest[srcArg]) || isBlankString(dest[srcArg])) {\n        if (isFunction(src[srcArg])) {\n          dest[srcArg] = src[srcArg];\n        } else {\n          dest[srcArg] = clone(src[srcArg]);\n        }\n      } else if (objAndSameType(dest[srcArg], src[srcArg])) {\n        reverseDeepMerge(dest[srcArg], src[srcArg]);\n      }\n    }\n  });\n  return dest;\n}\n\nexport function isNullOrUndefined(value: any) {\n  return value === undefined || value === null;\n}\n\nexport function isUndefined(value: any) {\n  return value === undefined;\n}\n\nexport function isBlankString(value: any) {\n  return value === '';\n}\n\nexport function isFunction(value: any) {\n  return typeof(value) === 'function';\n}\n\nexport function objAndSameType(obj1: any, obj2: any) {\n  return isObject(obj1) && isObject(obj2)\n    && Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2)\n    && !(Array.isArray(obj1) || Array.isArray(obj2));\n}\n\nexport function isObject(x: any) {\n  return x != null && typeof x === 'object';\n}\n\nexport function clone(value: any): any {\n  if (!isObject(value) || value instanceof RegExp || value instanceof Observable) {\n    return value;\n  }\n\n  if (value instanceof AbstractControl) {\n    return null;\n  }\n\n  if (Object.prototype.toString.call(value) === '[object Date]') {\n    return new Date(value.getTime());\n  }\n\n  if (Array.isArray(value)) {\n    return value.slice(0).map(v => clone(v));\n  }\n\n  value = Object.assign({}, value);\n  Object.keys(value).forEach(k => value[k] = clone(value[k]));\n\n  return value;\n}\n\nexport function removeFieldControl(form: FormArray | FormGroup, key: string | number) {\n  if (form instanceof FormArray) {\n    form.removeAt(key as number);\n  } else if (form instanceof FormGroup) {\n    form.removeControl(`${key}`);\n  }\n}\n","import { Injectable, InjectionToken, ComponentFactoryResolver } from '@angular/core';\nimport { ValidationErrors, FormGroup, FormArray, AbstractControl } from '@angular/forms';\nimport { FieldType } from './../templates/field.type';\nimport { reverseDeepMerge } from './../utils';\nimport { FormlyFieldConfig, FormlyFormOptions } from '../components/formly.field.config';\n\nexport const FORMLY_CONFIG = new InjectionToken<FormlyConfig>('FORMLY_CONFIG');\n\n/** @experimental */\nexport interface FormlyExtension {\n  prePopulate?(field: FormlyFieldConfig): void;\n  onPopulate?(field: FormlyFieldConfig): void;\n  postPopulate?(field: FormlyFieldConfig): void;\n}\n\n/**\n * Maintains list of formly field directive types. This can be used to register new field templates.\n */\n@Injectable({ providedIn: 'root' })\nexport class FormlyConfig {\n  types: {[name: string]: TypeOption} = {};\n  validators: { [name: string]: ValidatorOption } = {};\n  wrappers: { [name: string]: WrapperOption } = {};\n  messages: { [name: string]: string | ((error: any, field: FormlyFieldConfig) => string); } = {};\n  templateManipulators: {\n    preWrapper: ManipulatorWrapper[];\n    postWrapper: ManipulatorWrapper[];\n  } = {\n    preWrapper: [],\n    postWrapper: [],\n  };\n  extras: {\n    fieldTransform?: ((fields: FormlyFieldConfig[], model: any, form: FormGroup | FormArray, options: FormlyFormOptions) => FormlyFieldConfig[])[],\n    showError?: (field: FieldType) => boolean;\n  } = {\n    fieldTransform: undefined,\n    showError: function(field: FieldType) {\n      return field.formControl && field.formControl.invalid && (field.formControl.touched || (field.options.parentForm && field.options.parentForm.submitted) || (field.field.validation && field.field.validation.show));\n    },\n  };\n  extensions: { [name: string]: FormlyExtension } = {};\n\n  addConfig(config: ConfigOption) {\n    if (config.types) {\n      config.types.forEach(type => this.setType(type));\n    }\n    if (config.validators) {\n      config.validators.forEach(validator => this.setValidator(validator));\n    }\n    if (config.wrappers) {\n      config.wrappers.forEach(wrapper => this.setWrapper(wrapper));\n    }\n    if (config.manipulators) {\n      config.manipulators.forEach(manipulator => this.setManipulator(manipulator));\n    }\n    if (config.validationMessages) {\n      config.validationMessages.forEach(validation => this.addValidatorMessage(validation.name, validation.message));\n    }\n    if (config.extensions) {\n      config.extensions.forEach(c => this.extensions[c.name] = c.extension);\n    }\n    if (config.extras) {\n      this.extras = { ...this.extras, ...config.extras };\n    }\n  }\n\n  setType(options: TypeOption | TypeOption[]) {\n    if (Array.isArray(options)) {\n      options.forEach((option) => this.setType(option));\n    } else {\n      if (!this.types[options.name]) {\n        this.types[options.name] = <TypeOption>{};\n      }\n      this.types[options.name].component = options.component;\n      this.types[options.name].name = options.name;\n      this.types[options.name].extends = options.extends;\n      this.types[options.name].defaultOptions = options.defaultOptions;\n      this.types[options.name].componentFactoryResolver = options.componentFactoryResolver;\n      if (options.wrappers) {\n        options.wrappers.forEach((wrapper) => this.setTypeWrapper(options.name, wrapper));\n      }\n    }\n  }\n\n  getType(name: string): TypeOption {\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n\n    return this.types[name];\n  }\n\n  getMergedField(field: FormlyFieldConfig = {}): any {\n    let name = field.type;\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n    if (this.types[name].defaultOptions) {\n      reverseDeepMerge(field, this.types[name].defaultOptions);\n    }\n\n    let extendDefaults = this.types[name].extends && this.getType(this.types[name].extends).defaultOptions;\n    if (extendDefaults) {\n      reverseDeepMerge(field, extendDefaults);\n    }\n\n    if (field && field.optionsTypes) {\n      field.optionsTypes.forEach(option => {\n        let defaultOptions = this.getType(option).defaultOptions;\n        if (defaultOptions) {\n          reverseDeepMerge(field, defaultOptions);\n        }\n      });\n    }\n\n    (<any> field).component = this.types[name].component;\n\n    if (!field.wrappers && this.types[name].wrappers) {\n      field.wrappers = [...this.types[name].wrappers];\n    }\n  }\n\n  setWrapper(options: WrapperOption) {\n    this.wrappers[options.name] = options;\n    if (options.types) {\n      options.types.forEach((type) => {\n        this.setTypeWrapper(type, options.name);\n      });\n    }\n  }\n\n  getWrapper(name: string): WrapperOption {\n    if (!this.wrappers[name]) {\n      throw new Error(`[Formly Error] There is no wrapper by the name of \"${name}\"`);\n    }\n\n    return this.wrappers[name];\n  }\n\n  setTypeWrapper(type: string, name: string) {\n    if (!this.types[type]) {\n      this.types[type] = <TypeOption>{};\n    }\n    if (!this.types[type].wrappers) {\n      this.types[type].wrappers = <[string]>[];\n    }\n    if (this.types[type].wrappers.indexOf(name) === -1) {\n      this.types[type].wrappers.push(name);\n    }\n  }\n\n  setValidator(options: ValidatorOption) {\n    this.validators[options.name] = options;\n  }\n\n  getValidator(name: string): ValidatorOption {\n    if (!this.validators[name]) {\n      throw new Error(`[Formly Error] There is no validator by the name of \"${name}\"`);\n    }\n\n    return this.validators[name];\n  }\n\n  addValidatorMessage(name: string, message: string | ((error: any, field: FormlyFieldConfig) => string)) {\n    this.messages[name] = message;\n  }\n\n  getValidatorMessage(name: string) {\n    return this.messages[name];\n  }\n\n  setManipulator(manipulator: ManipulatorOption) {\n    new manipulator.class()[manipulator.method](this);\n  }\n\n  private mergeExtendedType(name: string) {\n    if (!this.types[name].extends) {\n      return;\n    }\n\n    const extendedType = this.getType(this.types[name].extends);\n    if (!this.types[name].component) {\n      this.types[name].component = extendedType.component;\n    }\n\n    if (!this.types[name].wrappers) {\n      this.types[name].wrappers = extendedType.wrappers;\n    }\n  }\n}\nexport interface TypeOption {\n  name: string;\n  component?: any;\n  wrappers?: string[];\n  extends?: string;\n  defaultOptions?: FormlyFieldConfig;\n  componentFactoryResolver?: ComponentFactoryResolver;\n}\n\nexport interface WrapperOption {\n  name: string;\n  component: any;\n  types?: string[];\n  componentFactoryResolver?: ComponentFactoryResolver;\n}\n\nexport interface FieldValidatorFn {\n  (c: AbstractControl, field: FormlyFieldConfig): ValidationErrors | null;\n}\n\nexport interface ValidatorOption {\n  name: string;\n  validation: FieldValidatorFn;\n}\n\nexport interface ExtensionOption {\n  name: string;\n  extension: FormlyExtension;\n}\n\nexport interface ValidationMessageOption {\n  name: string;\n  message: string | ((error: any, field: FormlyFieldConfig) => string);\n}\n\nexport interface ManipulatorOption {\n  class?: { new (): any };\n  method?: string;\n}\n\nexport interface ManipulatorWrapper {\n  (f: FormlyFieldConfig): string;\n}\n\nexport interface TemplateManipulators {\n  preWrapper?: ManipulatorWrapper[];\n  postWrapper?: ManipulatorWrapper[];\n}\n\nexport interface ConfigOption {\n  types?: TypeOption[];\n  wrappers?: WrapperOption[];\n  validators?: ValidatorOption[];\n  extensions?: ExtensionOption[];\n  validationMessages?: ValidationMessageOption[];\n  manipulators?: ManipulatorOption[];\n  extras?: {\n    fieldTransform?: any,\n    showError?: (field: FieldType) => boolean;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { FormGroup, FormArray, FormControl, AbstractControl, Validators, AbstractControlOptions } from '@angular/forms';\nimport { FormlyConfig, FieldValidatorFn, TemplateManipulators } from './formly.config';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyFieldConfigCache, FormlyFormOptionsCache } from '../components/formly.field.config';\nimport { FORMLY_VALIDATORS, getFieldId, isObject, isNullOrUndefined, getKeyPath, assignModelValue, isUndefined, clone, removeFieldControl, getFieldValue } from '../utils';\n\n@Injectable({ providedIn: 'root' })\nexport class FormlyFormBuilder {\n  private formId = 0;\n\n  constructor(private formlyConfig: FormlyConfig) {}\n\n  buildForm(formControl: FormGroup | FormArray, fieldGroup: FormlyFieldConfig[] = [], model: any, options: FormlyFormOptions) {\n    const fieldTransforms = (options && options.fieldTransform) || this.formlyConfig.extras.fieldTransform;\n    (Array.isArray(fieldTransforms) ? fieldTransforms : [fieldTransforms]).forEach(fieldTransform => {\n      if (fieldTransform) {\n        fieldGroup = fieldTransform(fieldGroup, model, formControl, options);\n        if (!fieldGroup) {\n          throw new Error('fieldTransform must return an array of fields');\n        }\n      }\n    });\n\n    this._buildForm({ fieldGroup, model, formControl, options });\n    if ((<FormlyFormOptionsCache>options)._checkField) {\n      (<FormlyFormOptionsCache> options)._checkField({ fieldGroup, model, formControl, options });\n    }\n  }\n\n  private _buildForm(root: FormlyFieldConfigCache) {\n    this.formId++;\n    root.fieldGroup.forEach((field, index) => {\n      this.getExtensions().forEach(extension => extension.prePopulate && extension.prePopulate(field));\n      this.initFieldOptions(root, field, index);\n      this.getExtensions().forEach(extension => extension.onPopulate && extension.onPopulate(field));\n      this.initFieldValidation(field);\n      this.initFieldAsyncValidation(field);\n      if (field.key && field.type) {\n        const paths = getKeyPath({ key: field.key });\n        let rootForm = root.formControl as FormGroup, rootModel = field.fieldGroup ? { [paths[0]]: field.model } : field.model;\n        paths.forEach((path, index) => {\n          // FormGroup/FormArray only allow string value for path\n          const formPath = path.toString();\n          // is last item\n          if (index === paths.length - 1) {\n            this.addFormControl(rootForm, field, rootModel, formPath);\n\n          } else {\n            let nestedForm = rootForm.get(formPath) as FormGroup;\n            if (!nestedForm) {\n              nestedForm = new FormGroup({});\n              this.addControl(rootForm, formPath, nestedForm);\n            }\n            if (!rootModel[path]) {\n              rootModel[path] = typeof path === 'string' ? {} : [];\n            }\n\n            rootForm = nestedForm;\n            rootModel = rootModel[path];\n          }\n        });\n      } else if (!field.key && field.fieldGroup) {\n        field.formControl = root.formControl;\n      }\n\n      if (field.fieldGroup) {\n        this._buildForm(field);\n      }\n      this.getExtensions().forEach(extension => extension.postPopulate && extension.postPopulate(field));\n    });\n  }\n\n  private getExtensions() {\n    return Object.keys(this.formlyConfig.extensions).map(name => this.formlyConfig.extensions[name]);\n  }\n\n  private initFieldOptions(root: FormlyFieldConfigCache, field: FormlyFieldConfig, index: number) {\n    Object.defineProperty(field, 'options', { get: () => root.options, configurable: true });\n    Object.defineProperty(field, 'parent', { get: () => root, configurable: true });\n    Object.defineProperty(field, 'model', {\n      get: () => field.key && field.fieldGroup ? getFieldValue(field) : root.model,\n      configurable: true,\n    });\n\n    field.id = getFieldId(`formly_${this.formId}`, field, index);\n    field.templateOptions = field.templateOptions || {};\n    field.modelOptions = field.modelOptions || {};\n    field.lifecycle = field.lifecycle || {};\n    if (field.type && field.key) {\n      field.templateOptions = Object.assign({\n        label: '',\n        placeholder: '',\n        focus: false,\n      }, field.templateOptions);\n    }\n\n    if (field.template && field.type !== 'formly-template') {\n      if (field.type) {\n        console.warn(`NgxFormly: passing 'type' property is not allowed when 'template' is set.`);\n      }\n      field.type = 'formly-template';\n    }\n\n    if (field.type) {\n      this.formlyConfig.getMergedField(field);\n    }\n    if (field.key && isUndefined(field.defaultValue) && (field.fieldGroup || field.fieldArray)) {\n      field.defaultValue = field.fieldArray ? [] : {};\n    }\n\n    if (!isUndefined(field.defaultValue) && isUndefined(getFieldValue(field))) {\n      assignModelValue(root.model, field.key, field.defaultValue);\n    }\n\n    this.initFieldWrappers(field);\n    if (field.fieldArray) {\n      this.initFieldArray(field);\n    }\n\n    if (!field.type && field.fieldGroup) {\n      field.type = 'formly-group';\n    }\n  }\n\n  private initFieldArray(field: FormlyFieldConfigCache) {\n    field.fieldGroup = field.fieldGroup || [];\n    if (field.fieldGroup.length > field.model.length) {\n      for (let i = field.fieldGroup.length; i >= field.model.length; --i) {\n        removeFieldControl(field.formControl as FormArray, i);\n        field.fieldGroup.splice(i, 1);\n      }\n    }\n\n    for (let i = field.fieldGroup.length; i < field.model.length; i++) {\n      const f = { ...clone(field.fieldArray), key: `${i}` };\n      field.fieldGroup.push(f);\n    }\n  }\n\n  private addFormControl(form: FormGroup | FormArray, field: FormlyFieldConfigCache, model: any, path: string) {\n    const abstractControlOptions = {\n      validators: field._validators,\n      asyncValidators: field._asyncValidators,\n      updateOn: field.modelOptions.updateOn,\n    } as AbstractControlOptions;\n    let control: AbstractControl;\n\n    if (field.formControl instanceof AbstractControl || form.get(path)) {\n      control = field.formControl || form.get(path);\n      if (\n        !(isNullOrUndefined(control.value) && isNullOrUndefined(model[path]))\n        && control.value !== model[path]\n        && control instanceof FormControl\n      ) {\n        control.patchValue(model[path]);\n      }\n\n      if (abstractControlOptions.validators || abstractControlOptions.asyncValidators) {\n        if (abstractControlOptions.validators) {\n          control.setValidators(abstractControlOptions.validators);\n        }\n        if (abstractControlOptions.asyncValidators) {\n          control.setAsyncValidators(abstractControlOptions.asyncValidators);\n        }\n        control.updateValueAndValidity();\n      }\n    } else if ((<any>field).component && (<any>field).component.createControl) {\n      control = (<any>field).component.createControl(model[path], field);\n    } else if (field.fieldGroup && !field.fieldArray) {\n      control = new FormGroup({}, abstractControlOptions);\n    } else if (field.fieldArray) {\n      control = new FormArray([], abstractControlOptions);\n    } else {\n      control = new FormControl(model[path], abstractControlOptions);\n    }\n\n    if (field.templateOptions.disabled) {\n      control.disable();\n    }\n\n    // Replace decorated property with a getter that returns the observable.\n    // https://github.com/angular-redux/store/blob/master/src/decorators/select.ts#L79-L85\n    if (delete field.templateOptions.disabled) {\n      Object.defineProperty(field.templateOptions, 'disabled', {\n        get: () => !field.formControl.enabled,\n        set: (value: boolean) => value ? field.formControl.disable() : field.formControl.enable(),\n        enumerable: true,\n        configurable: true,\n      });\n    }\n\n    this.addControl(form, path, control, field);\n  }\n\n  private addControl(form: FormGroup | FormArray, key: string | number, formControl: AbstractControl, field?: FormlyFieldConfig) {\n    if (field) {\n      field.formControl = formControl;\n    }\n\n    if (form instanceof FormArray) {\n      if (form.at(<number> key) !== formControl) {\n        form.setControl(<number>key, formControl);\n      }\n    } else {\n      if (form.get(<string> key) !== formControl) {\n        form.setControl(<string>key, formControl);\n      }\n    }\n  }\n\n  private initFieldValidation(field: FormlyFieldConfigCache) {\n    if (field._validators) {\n      return;\n    }\n\n    field._validators = [];\n    this.initPredefinedFieldValidation(field);\n    if (field.validators) {\n      for (const validatorName in field.validators) {\n        if (validatorName !== 'validation') {\n          let validator = field.validators[validatorName];\n          let errorPath;\n          let message;\n          if (isObject(validator)) {\n            errorPath = validator.errorPath;\n            message = validator.message;\n            validator = validator.expression;\n          }\n\n          field._validators.push((control: AbstractControl) => {\n            const isValid = validator(control, field);\n            if (errorPath && field.formControl && field.formControl.get(errorPath)) {\n              if (!isValid) {\n                field.formControl.get(errorPath).setErrors({\n                  ...(field.formControl.get(errorPath).errors || {}),\n                  [validatorName]: { message },\n                });\n              } else {\n                const errors = (field.formControl.get(errorPath).errors || {});\n                delete errors[validatorName];\n                field.formControl.get(errorPath).setErrors(Object.keys(errors).length === 0 ? null : errors);\n              }\n            }\n\n            return isValid ? null : { [validatorName]: errorPath ? { errorPath } : true };\n          });\n        } else {\n          if (!Array.isArray(field.validators.validation)) {\n            field.validators.validation = [field.validators.validation];\n          }\n          field.validators.validation\n            .forEach((validator: any) => field._validators.push(this.wrapNgValidatorFn(field, validator)));\n        }\n      }\n    }\n  }\n\n  private initFieldAsyncValidation(field: FormlyFieldConfigCache) {\n    if (field._asyncValidators) {\n      return;\n    }\n\n    field._asyncValidators = [];\n    if (field.asyncValidators) {\n      for (const validatorName in field.asyncValidators) {\n        if (validatorName !== 'validation') {\n          let validator = field.asyncValidators[validatorName];\n          if (isObject(validator)) {\n            validator = validator.expression;\n          }\n\n          field._asyncValidators.push((control: FormControl) => new Promise((resolve) => {\n            return validator(control, field).then((result: boolean) => {\n              resolve(result ? null : { [validatorName]: true });\n            });\n          }));\n        } else {\n          if (!Array.isArray(field.asyncValidators.validation)) {\n            field.asyncValidators.validation = [field.asyncValidators.validation];\n          }\n          field.asyncValidators.validation\n            .forEach((validator: any) => field._asyncValidators.push(this.wrapNgValidatorFn(field, validator) as any));\n        }\n      }\n    }\n  }\n\n  private initPredefinedFieldValidation(field: FormlyFieldConfigCache) {\n    FORMLY_VALIDATORS\n      .filter(opt => field.templateOptions.hasOwnProperty(opt) || (field.expressionProperties && field.expressionProperties[`templateOptions.${opt}`]))\n      .forEach((opt) => {\n        field._validators.push((control: AbstractControl) => {\n          const value = field.templateOptions[opt];\n          if (value === false) {\n            return null;\n          }\n          switch (opt) {\n            case 'required':\n              return Validators.required(control);\n            case 'pattern':\n              return Validators.pattern(value)(control);\n            case 'minLength':\n              return Validators.minLength(value)(control);\n            case 'maxLength':\n              return Validators.maxLength(value)(control);\n            case 'min':\n              return Validators.min(value)(control);\n            case 'max':\n              return Validators.max(value)(control);\n          }\n        });\n      });\n  }\n\n  private wrapNgValidatorFn(field: FormlyFieldConfig, validator: string | FieldValidatorFn) {\n    validator = typeof validator === 'string'\n    ? this.formlyConfig.getValidator(validator).validation\n    : validator;\n\n    return (control: AbstractControl) => (validator as FieldValidatorFn)(control, field);\n  }\n\n  private initFieldWrappers(field: FormlyFieldConfig) {\n    field.wrappers = field.wrappers || [];\n    const fieldTemplateManipulators: TemplateManipulators = {\n      preWrapper: [],\n      postWrapper: [],\n      ...(field.templateOptions.templateManipulators || {}),\n    };\n\n    field.wrappers = [\n      ...this.formlyConfig.templateManipulators.preWrapper.map(m => m(field)),\n      ...fieldTemplateManipulators.preWrapper.map(m => m(field)),\n      ...field.wrappers,\n      ...this.formlyConfig.templateManipulators.postWrapper.map(m => m(field)),\n      ...fieldTemplateManipulators.postWrapper.map(m => m(field)),\n    ].filter((el, i, a) => el && i === a.indexOf(el));\n  }\n}\n","import { Component, DoCheck, OnChanges, Input, SimpleChanges, Optional, EventEmitter, Output, SkipSelf, OnDestroy } from '@angular/core';\nimport { FormGroup, FormArray, NgForm, FormGroupDirective } from '@angular/forms';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyValueChangeEvent, FormlyFormOptionsCache } from './formly.field.config';\nimport { FormlyFormBuilder } from '../services/formly.form.builder';\nimport { FormlyConfig } from '../services/formly.config';\nimport { assignModelValue, isNullOrUndefined, reverseDeepMerge } from '../utils';\nimport { Subject, Subscription } from 'rxjs';\nimport { debounceTime, map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'formly-form',\n  template: `\n    <formly-field *ngFor=\"let field of fields\"\n      [form]=\"form\"\n      [field]=\"field\"\n      [ngClass]=\"field.className\"\n      [options]=\"options\">\n    </formly-field>\n    <ng-content></ng-content>\n  `,\n})\nexport class FormlyForm implements DoCheck, OnChanges, OnDestroy {\n  @Input() model: any = {};\n  @Input() form: FormGroup | FormArray = new FormGroup({});\n  @Input() fields: FormlyFieldConfig[] = [];\n  @Input() options: FormlyFormOptions;\n  @Output() modelChange = new EventEmitter<any>();\n\n  /** @internal */\n  @Input() isRoot = true;\n\n  private initialModel: any;\n  private modelChangeSubs: Subscription[] = [];\n\n  private enableCheckExprDebounce = false;\n  private checkExpressionChange$ = this.modelChange.pipe(\n    debounceTime(this.enableCheckExprDebounce ? 100 : 0),\n    tap(() => {\n      this.enableCheckExprDebounce = true;\n      this.checkExpressionChange();\n      this.enableCheckExprDebounce = false;\n    }),\n  ).subscribe();\n\n  constructor(\n    private formlyBuilder: FormlyFormBuilder,\n    private formlyConfig: FormlyConfig,\n    @Optional() private parentForm: NgForm,\n    @Optional() private parentFormGroup: FormGroupDirective,\n    @Optional() @SkipSelf() private parentFormlyForm: FormlyForm,\n  ) {}\n\n  ngDoCheck() {\n    this.checkExpressionChange();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this.fields || this.fields.length === 0 || !this.isRoot) {\n      return;\n    }\n\n    if (changes.fields || changes.form || changes.model) {\n      this.model = this.model || {};\n      this.form = this.form || (new FormGroup({}));\n      this.setOptions();\n      this.clearModelSubscriptions();\n      this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);\n      this.trackModelChanges(this.fields);\n      this.options.updateInitialValue();\n    }\n  }\n\n  ngOnDestroy() {\n    this.clearModelSubscriptions();\n    this.checkExpressionChange$.unsubscribe();\n  }\n\n  changeModel(event: { key: string, value: any }) {\n    assignModelValue(this.model, event.key, event.value);\n    this.modelChange.emit(this.model);\n  }\n\n  setOptions() {\n    this.options = this.options || {};\n\n    this.options.formState = this.options.formState || {};\n    if (!this.options.showError) {\n      this.options.showError = this.formlyConfig.extras.showError;\n    }\n    if (!this.options.fieldChanges) {\n      this.options.fieldChanges = new Subject<FormlyValueChangeEvent>();\n    }\n\n    if (!this.options.resetModel) {\n      this.options.resetModel = (model ?: any) => {\n        model = isNullOrUndefined(model) ? this.initialModel : model;\n        if (this.model) {\n          Object.keys(this.model).forEach(k => delete this.model[k]);\n          Object.assign(this.model, model || {});\n        }\n\n        this.clearModelSubscriptions();\n        this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);\n        this.trackModelChanges(this.fields);\n\n        // we should call `NgForm::resetForm` to ensure changing `submitted` state after resetting form\n        // but only when the current component is a root one.\n        if (!this.parentFormlyForm && this.options.parentForm && this.options.parentForm.control === this.form) {\n          this.options.parentForm.resetForm(model);\n        } else {\n          this.form.reset(model);\n        }\n      };\n    }\n\n    if (!this.options.parentForm) {\n      this.options.parentForm = this.parentFormGroup || this.parentForm;\n    }\n\n    if (!this.options.updateInitialValue) {\n      this.options.updateInitialValue = () => this.initialModel = reverseDeepMerge({}, this.model);\n    }\n\n    if (!(<FormlyFormOptionsCache> this.options)._buildForm) {\n      (<FormlyFormOptionsCache> this.options)._buildForm = () => {\n        this.clearModelSubscriptions();\n        this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);\n        this.trackModelChanges(this.fields);\n      };\n    }\n  }\n\n  private checkExpressionChange() {\n    if (this.isRoot && (<FormlyFormOptionsCache> this.options)._checkField) {\n      (<FormlyFormOptionsCache> this.options)._checkField({ fieldGroup: this.fields, model: this.model, formControl: this.form, options: this.options });\n    }\n  }\n\n  private trackModelChanges(fields: FormlyFieldConfig[], rootKey: string[] = []) {\n    fields.forEach(field => {\n      if (field.key && field.type && !field.fieldGroup) {\n        const valueChanges = field.formControl.valueChanges.pipe(\n          field.modelOptions.debounce && field.modelOptions.debounce.default\n          ? debounceTime(field.modelOptions.debounce.default)\n          : tap(() => {}),\n          map(value => {\n            if (field.parsers && field.parsers.length > 0) {\n              field.parsers.forEach(parserFn => value = parserFn(value));\n            }\n\n            return value;\n          }),\n          tap(value => this.changeModel({ key: [...rootKey, field.key].join('.'), value })),\n        );\n\n        this.modelChangeSubs.push(valueChanges.subscribe());\n      }\n\n      if (field.fieldGroup && field.fieldGroup.length > 0) {\n        this.trackModelChanges(field.fieldGroup, field.key ? [...rootKey, field.key] : rootKey);\n      }\n    });\n  }\n\n  private clearModelSubscriptions() {\n    this.modelChangeSubs.forEach(sub => sub.unsubscribe());\n    this.modelChangeSubs = [];\n  }\n}\n","import {\n  Component, OnInit, OnChanges, EventEmitter, Input, Output, OnDestroy,\n  ViewContainerRef, ViewChild, ComponentRef, SimpleChanges, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormlyConfig } from '../services/formly.config';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyLifeCycleFn, FormlyLifeCycleOptions } from './formly.field.config';\nimport { FieldWrapper } from '../templates/field.wrapper';\n\n@Component({\n  selector: 'formly-field',\n  template: `<ng-template #container></ng-template>`,\n  host: {\n    '[style.display]': 'field.hide ? \"none\":\"\"',\n  },\n})\nexport class FormlyField implements OnInit, OnChanges, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked, OnDestroy {\n  @Input() set model(m: any) {\n    console.warn(`NgxFormly: passing 'model' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);\n  }\n\n  @Input() form: FormGroup;\n  @Input() field: FormlyFieldConfig;\n  @Input() options: FormlyFormOptions = {};\n  @Output() modelChange: EventEmitter<any> = new EventEmitter();\n  @ViewChild('container', {read: ViewContainerRef}) containerRef: ViewContainerRef;\n\n  private componentRefs: ComponentRef<FieldWrapper>[] = [];\n\n  constructor(private formlyConfig: FormlyConfig) {}\n\n  ngAfterContentInit() {\n    this.lifeCycleHooks(this.lifecycle.afterContentInit);\n  }\n\n  ngAfterContentChecked() {\n    this.lifeCycleHooks(this.lifecycle.afterContentChecked);\n  }\n\n  ngAfterViewInit() {\n    this.lifeCycleHooks(this.lifecycle.afterViewInit);\n  }\n\n  ngAfterViewChecked() {\n    this.lifeCycleHooks(this.lifecycle.afterViewChecked);\n  }\n\n  ngDoCheck() {\n    this.lifeCycleHooks(this.lifecycle.doCheck);\n  }\n\n  ngOnInit() {\n    this.lifeCycleHooks(this.lifecycle.onInit);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.field) {\n      this.renderField(this.field, this.containerRef);\n    }\n\n    this.lifeCycleHooks(this.lifecycle.onChanges);\n    this.componentRefs.forEach(ref => {\n      Object.assign(ref.instance, {\n        form: this.form,\n        field: this.field,\n        options: this.options,\n      });\n    });\n  }\n\n  ngOnDestroy() {\n    this.lifeCycleHooks(this.lifecycle.onDestroy);\n    this.componentRefs.forEach(componentRef => componentRef.destroy());\n    this.componentRefs = [];\n  }\n\n  private renderField(field: FormlyFieldConfig, containerRef: ViewContainerRef) {\n    this.componentRefs.forEach(componentRef => componentRef.destroy());\n    this.componentRefs = [];\n\n    const wrappers = <any>(field.wrappers || []).map(wrapperName => this.formlyConfig.getWrapper(wrapperName));\n    [...wrappers, this.formlyConfig.getType(field.type)].forEach(({ componentFactoryResolver, component }) => {\n      const ref = containerRef.createComponent<FieldWrapper>(componentFactoryResolver.resolveComponentFactory(component));\n\n      Object.assign(ref.instance, { form: this.form, options: this.options, field });\n      this.componentRefs.push(ref);\n      containerRef = ref.instance.fieldComponent;\n    });\n  }\n\n  private get lifecycle(): FormlyLifeCycleOptions {\n    return this.field.lifecycle || {};\n  }\n\n  private lifeCycleHooks(callback: FormlyLifeCycleFn) {\n    if (callback) {\n      callback(this.form, this.field, this.field.model, this.options);\n    }\n  }\n}\n","import { Directive, HostListener, ElementRef, Input, OnChanges, SimpleChanges, Renderer2 } from '@angular/core';\nimport { FormlyFieldConfig, FormlyTemplateOptions } from './formly.field.config';\n\n@Directive({\n  selector: '[formlyAttributes]',\n  host: {\n    '[attr.name]': 'field.name',\n    '[attr.placeholder]': 'to.placeholder',\n    '[attr.tabindex]': 'to.tabindex',\n    '[attr.readonly]': 'to.readonly',\n    '[attr.step]': 'to.step',\n\n    '(keyup)': 'to.keyup && to.keyup(field, $event)',\n    '(keydown)': 'to.keydown && to.keydown(field, $event)',\n    '(click)': 'to.click && to.click(field, $event)',\n    '(change)': 'to.change && to.change(field, $event)',\n    '(keypress)': 'to.keypress && to.keypress(field, $event)',\n  },\n})\nexport class FormlyAttributes implements OnChanges {\n  @Input('formlyAttributes') field: FormlyFieldConfig;\n\n  @HostListener('focus', ['$event']) onFocus($event) {\n    this.field.focus = true;\n    if (this.to.focus) {\n      this.to.focus(this.field, $event);\n    }\n  }\n\n  @HostListener('blur', ['$event']) onBlur($event) {\n    this.field.focus = false;\n    if (this.to.blur) {\n      this.to.blur(this.field, $event);\n    }\n  }\n\n  get to(): FormlyTemplateOptions {\n    return this.field.templateOptions || {};\n  }\n\n  constructor(\n    private renderer: Renderer2,\n    private elementRef: ElementRef,\n  ) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.field) {\n      const fieldChanges = changes.field;\n\n      this.renderer.setAttribute(this.elementRef.nativeElement, 'id', this.field.id);\n      if (this.to && this.to.attributes) {\n        this.setAttributes(this.to.attributes);\n        Object.defineProperty(this.to, 'attributes', {\n          get: () => this.to.__attributes__,\n          set: attributes => this.setAttributes(attributes),\n          enumerable: true,\n          configurable: true,\n        });\n      }\n\n      if ((fieldChanges.previousValue || {}).focus !== (fieldChanges.currentValue || {}).focus && this.elementRef.nativeElement.focus) {\n        this.elementRef.nativeElement[this.field.focus ? 'focus' : 'blur']();\n      }\n    }\n  }\n\n  private setAttributes(attributes) {\n    if (this.to.__attributes__ && this.to.__attributes__ !== attributes) {\n      Object.keys(this.to.__attributes__).forEach(name => this.renderer.removeAttribute(this.elementRef.nativeElement, name));\n    }\n\n    this.to.__attributes__ = attributes;\n    Object.keys(attributes).forEach(name => this.renderer.setAttribute(\n      this.elementRef.nativeElement, name, attributes[name] as string,\n    ));\n  }\n}\n","import { Input } from '@angular/core';\nimport { FormGroup, AbstractControl } from '@angular/forms';\nimport { FormlyTemplateOptions, FormlyFieldConfig, FormlyFormOptions } from '../components/formly.field.config';\n\n export abstract class FieldType {\n  @Input() form: FormGroup;\n  @Input() field: FormlyFieldConfig;\n  @Input() options: FormlyFormOptions;\n\n  @Input()\n  get model() { return this.field.model; }\n  set model(m: any) { console.warn(`NgxFormly: passing 'model' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }\n\n  get key() { return this.field.key; }\n\n  get formControl(): AbstractControl { return this.field.formControl; }\n\n  get to(): FormlyTemplateOptions { return this.field.templateOptions; }\n\n  get showError(): boolean { return this.options.showError(this); }\n\n  get id(): string { return this.field.id; }\n\n  get formState() { return this.options.formState || {}; }\n}\n\n/**\n * @deprecated use `FieldType` instead\n */\nexport abstract class Field extends FieldType {\n  constructor() {\n    super();\n    console.warn(`NgxFormly: 'Field' has been renamed to 'FieldType', extend 'FieldType' instead.`);\n  }\n}\n","import { FormArray } from '@angular/forms';\nimport { FieldType } from './field.type';\nimport { clone, isNullOrUndefined } from '../utils';\nimport { FormlyFormBuilder } from '../services/formly.form.builder';\n\nexport abstract class FieldArrayType extends FieldType {\n  formControl: FormArray;\n\n  // tslint:disable-next-line\n  constructor(builder: FormlyFormBuilder) {\n    super();\n  }\n\n  add(i?: number, initialModel?: any) {\n    i = isNullOrUndefined(i) ? this.field.fieldGroup.length : i;\n    this.model.splice(i, 0, initialModel ? clone(initialModel) : undefined);\n\n    (<any> this.options)._buildForm();\n  }\n\n  remove(i: number) {\n    this.model.splice(i, 1);\n\n    (<any> this.options)._buildForm();\n  }\n}\n","import { ViewContainerRef } from '@angular/core';\nimport { FieldType } from './field.type';\n\nexport abstract class FieldWrapper extends FieldType {\n  fieldComponent: ViewContainerRef;\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from '../templates/field.type';\n\n@Component({\n  selector: 'formly-group',\n  template: `\n    <formly-form\n      [fields]=\"field.fieldGroup\"\n      [isRoot]=\"false\"\n      [model]=\"field.model\"\n      [form]=\"field.formControl\"\n      [options]=\"options\"\n      [ngClass]=\"field.fieldGroupClassName\">\n      <ng-content></ng-content>\n    </formly-form>\n  `,\n})\nexport class FormlyGroup extends FieldType {}\n","import { Component, Input } from '@angular/core';\nimport { FormlyConfig } from '../services/formly.config';\nimport { FormlyFieldConfig } from '../components/formly.field.config';\nimport { isObject } from '../utils';\n\n@Component({\n  selector: 'formly-validation-message',\n  template: `{{ errorMessage }}`,\n})\nexport class FormlyValidationMessage {\n  @Input() field: FormlyFieldConfig;\n\n  constructor(private formlyConfig: FormlyConfig) {}\n\n  get errorMessage(): string {\n    const fieldForm = this.field.formControl;\n    for (let error in fieldForm.errors) {\n      if (fieldForm.errors.hasOwnProperty(error)) {\n        let message: string | Function = this.formlyConfig.getValidatorMessage(error);\n\n        if (isObject(fieldForm.errors[error])) {\n          if (fieldForm.errors[error].errorPath) {\n            return;\n          }\n\n          if (fieldForm.errors[error].message) {\n            message = fieldForm.errors[error].message;\n          }\n        }\n\n        if (this.field.validation && this.field.validation.messages && this.field.validation.messages[error]) {\n          message = this.field.validation.messages[error];\n        }\n\n        if (this.field.validators && this.field.validators[error] && this.field.validators[error].message) {\n          message = this.field.validators[error].message;\n        }\n\n        if (this.field.asyncValidators && this.field.asyncValidators[error] && this.field.asyncValidators[error].message) {\n          message = this.field.asyncValidators[error].message;\n        }\n\n        if (typeof message === 'function') {\n          return message(fieldForm.errors[error], this.field);\n        }\n\n        return message;\n      }\n    }\n  }\n}\n","export function evalStringExpression(expression: string, argNames: string[]) {\n  try {\n    return Function(...argNames, `return ${expression};`) as any;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport function evalExpressionValueSetter(expression: string, argNames: string[]) {\n  try {\n    return Function(...argNames, `${expression} = expressionValue;`) as (value: any) => void;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport function evalExpression(expression: string | Function | boolean, thisArg: any, argVal: any[]): any {\n  if (expression instanceof Function) {\n    return expression.apply(thisArg, argVal);\n  } else {\n    return expression ? true : false;\n  }\n}\n","import { FormGroup, FormArray } from '@angular/forms';\nimport { FormlyFieldConfig, FormlyValueChangeEvent, FormlyFieldConfigCache } from '../../components/formly.field.config';\nimport {\n  isObject, isNullOrUndefined, isFunction,\n  FORMLY_VALIDATORS, getFieldValue, getKeyPath, removeFieldControl,\n} from '../../utils';\nimport { evalExpression, evalStringExpression, evalExpressionValueSetter } from './utils';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { FormlyExtension } from '../../services/formly.config';\n\nexport class FieldExpressionExtension implements FormlyExtension {\n  onPopulate(field: FormlyFieldConfigCache) {\n    if (field._expressionProperties) {\n      return;\n    }\n\n    // cache built expression\n    field._expressionProperties = field._expressionProperties || {};\n\n    if (field.expressionProperties) {\n      for (const key in field.expressionProperties) {\n        const expressionProperty = field.expressionProperties[key],\n          expressionValueSetter = evalExpressionValueSetter(\n            `field.${key}`,\n            ['expressionValue', 'model', 'field'],\n          );\n\n        if (typeof expressionProperty === 'string' || isFunction(expressionProperty)) {\n          field._expressionProperties[key] = {\n            expression: this._evalExpression(\n              expressionProperty,\n              field.parent.expressionProperties && field.parent.expressionProperties.hasOwnProperty('templateOptions.disabled')\n                ? () => field.parent.templateOptions.disabled\n                : undefined,\n            ),\n            expressionValueSetter,\n          };\n          if (key === 'templateOptions.disabled') {\n            Object.defineProperty(field._expressionProperties[key], 'expressionValue', {\n              get: () => field.templateOptions.disabled,\n              set: () => { },\n              enumerable: true,\n              configurable: true,\n            });\n          }\n        } else if (expressionProperty instanceof Observable) {\n          const subscription = (expressionProperty as Observable<any>).pipe(\n            tap(v => evalExpression(expressionValueSetter, { field }, [v, field.model, field])),\n          ).subscribe();\n\n          const onDestroy = field.lifecycle.onDestroy;\n          field.lifecycle.onDestroy = (...args) => {\n            if (onDestroy) {\n              onDestroy(...args);\n            }\n            subscription.unsubscribe();\n          };\n        }\n      }\n    }\n\n    if (field.hideExpression || field.parent.hideExpression) {\n      // delete hide value in order to force re-evaluate it in FormlyFormExpression.\n      delete field.hide;\n      field.hideExpression = this._evalExpression(\n        field.hideExpression,\n        field.parent && field.parent.hideExpression ? () => field.parent.hide : undefined,\n      );\n    }\n\n    if (!field.options._checkField) {\n      field.options._checkField = (f) => this._checkField(f);\n    }\n  }\n\n  private _evalExpression(expression, parentExpression?) {\n    expression = expression || (() => false);\n    if (typeof expression === 'string') {\n      expression = evalStringExpression(expression, ['model', 'formState']);\n    }\n\n    return parentExpression\n      ? (model: any, formState: any) => parentExpression() || expression(model, formState)\n      : expression;\n  }\n\n  private _checkField(field: FormlyFieldConfigCache) {\n    field.fieldGroup.forEach(f => {\n      this.checkFieldExpressionChange(f);\n      this.checkFieldVisibilityChange(f);\n\n      if (f.fieldGroup && f.fieldGroup.length > 0) {\n        this._checkField(f);\n      }\n    });\n  }\n\n  private checkFieldExpressionChange(field: FormlyFieldConfigCache) {\n    if (!field || !field._expressionProperties) {\n      return;\n    }\n\n    const expressionProperties = field._expressionProperties;\n    const validators = FORMLY_VALIDATORS.map(v => `templateOptions.${v}`);\n\n    for (const key in expressionProperties) {\n      let expressionValue = evalExpression(expressionProperties[key].expression, { field }, [field.model, field.options.formState]);\n      if (key === 'templateOptions.disabled') {\n        expressionValue = expressionValue || false;\n      }\n\n      if (\n        expressionProperties[key].expressionValue !== expressionValue\n        && (!isObject(expressionValue) || JSON.stringify(expressionValue) !== JSON.stringify(expressionProperties[key].expressionValue))\n      ) {\n        expressionProperties[key].expressionValue = expressionValue;\n        evalExpression(\n          expressionProperties[key].expressionValueSetter,\n          { field },\n          [expressionValue, field.model, field],\n        );\n\n        if (key.indexOf('model.') === 0) {\n          const path = key.replace(/^model\\./, ''),\n            control = field.key && key === path ? field.formControl : field.parent.formControl.get(path);\n\n          if (\n            control\n            && !(isNullOrUndefined(control.value) && isNullOrUndefined(expressionValue))\n            && control.value !== expressionValue\n          ) {\n            control.patchValue(expressionValue);\n          }\n        }\n\n        if (validators.indexOf(key) !== -1 && field.formControl) {\n          field.formControl.updateValueAndValidity({ emitEvent: false });\n        }\n      }\n    }\n  }\n\n  private checkFieldVisibilityChange(field: FormlyFieldConfigCache) {\n    if (!field || isNullOrUndefined(field.hideExpression)) {\n      return;\n    }\n\n    const hideExpressionResult: boolean = !!evalExpression(\n      field.hideExpression,\n      { field },\n      [field.model, field.options.formState],\n    );\n\n    if (hideExpressionResult !== field.hide) {\n      // toggle hide\n      field.hide = hideExpressionResult;\n      field.templateOptions.hidden = hideExpressionResult;\n\n      if (field.formControl && field.key) {\n        const parent = this.fieldParentFormControl(field);\n        if (parent) {\n          const control = parent.get(`${this.fieldKey(field)}`);\n          if (hideExpressionResult === true && control) {\n            removeFieldControl(parent, this.fieldKey(field));\n          } else if (hideExpressionResult === false && !control) {\n            this.addFieldControl(parent, field);\n          }\n        }\n      }\n\n      if (field.options.fieldChanges) {\n        field.options.fieldChanges.next(<FormlyValueChangeEvent> { field: field, type: 'hidden', value: hideExpressionResult });\n      }\n    }\n  }\n\n  private addFieldControl(parent: FormArray | FormGroup, field: FormlyFieldConfig) {\n    const fieldModel = getFieldValue(field);\n    if (\n      !(isNullOrUndefined(field.formControl.value) && isNullOrUndefined(fieldModel))\n      && field.formControl.value !== fieldModel\n    ) {\n      field.formControl.patchValue(fieldModel, { emitEvent: false });\n    }\n\n    if (parent instanceof FormArray) {\n      parent.push(field.formControl);\n    } else if (parent instanceof FormGroup) {\n      parent.addControl(`${this.fieldKey(field)}`, field.formControl);\n    }\n  }\n\n  private fieldParentFormControl(field: FormlyFieldConfig): FormArray | FormGroup {\n    const paths = getKeyPath(field);\n    paths.pop(); // remove last path\n\n    return (paths.length > 0 ? field.parent.formControl.get(paths) : field.parent.formControl) as any;\n  }\n\n  private fieldKey(field: FormlyFieldConfig) {\n    return getKeyPath(field).pop();\n  }\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from './field.type';\n\n@Component({\n  selector: 'formly-template',\n  template: `<div [innerHtml]=\"field.template\"></div>`,\n})\nexport class FormlyTemplateType extends FieldType {}\n","import { NgModule, ModuleWithProviders, ANALYZE_FOR_ENTRY_COMPONENTS, Inject, Optional, ComponentFactoryResolver } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormlyForm } from './components/formly.form';\nimport { FormlyField } from './components/formly.field';\nimport { FormlyAttributes } from './components/formly.attributes';\nimport { FormlyConfig, ConfigOption, FORMLY_CONFIG } from './services/formly.config';\nimport { FormlyFormBuilder } from './services/formly.form.builder';\nimport { FormlyGroup } from './components/formly.group';\nimport { FormlyValidationMessage } from './templates/formly.validation-message';\nimport { FieldExpressionExtension } from './extensions/field-expression/field-expression';\nimport { FormlyTemplateType } from './templates/field-template.type';\n\nexport function defaultFormlyConfig(): ConfigOption {\n  return {\n    types: [\n      { name: 'formly-group', component: FormlyGroup },\n      { name: 'formly-template', component: FormlyTemplateType },\n    ],\n    extensions: [{ name: 'field-expression', extension: new FieldExpressionExtension() }],\n  };\n}\n\n@NgModule({\n  declarations: [\n    FormlyForm,\n    FormlyField,\n    FormlyAttributes,\n    FormlyGroup,\n    FormlyValidationMessage,\n    FormlyTemplateType,\n  ],\n  entryComponents: [FormlyGroup, FormlyTemplateType],\n  exports: [FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage],\n  imports: [CommonModule],\n})\nexport class FormlyModule {\n  static forRoot(config: ConfigOption = {}): ModuleWithProviders {\n    return {\n      ngModule: FormlyModule,\n      providers: [\n        { provide: FORMLY_CONFIG, multi: true, useFactory: defaultFormlyConfig },\n        { provide: FORMLY_CONFIG, useValue: config, multi: true },\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },\n        FormlyConfig,\n        FormlyFormBuilder,\n      ],\n    };\n  }\n\n  static forChild(config: ConfigOption = {}): ModuleWithProviders {\n    return {\n      ngModule: FormlyModule,\n      providers: [\n        { provide: FORMLY_CONFIG, useValue: config, multi: true },\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },\n      ],\n    };\n  }\n\n  constructor(\n    configService: FormlyConfig,\n    componentFactoryResolver: ComponentFactoryResolver,\n    @Optional() @Inject(FORMLY_CONFIG) configs: ConfigOption[] = [],\n  ) {\n    if (!configs) {\n      return;\n    }\n\n    configs.forEach(config => {\n      [...(config.types || []), ...(config.wrappers || [])]\n      .filter(t => !!t)\n      .forEach(t => t.componentFactoryResolver = componentFactoryResolver);\n\n      configService.addConfig(config);\n    });\n  }\n}\n"],"names":["tslib_1.__values","tslib_1.__spread","tslib_1.__extends"],"mappings":"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"}
