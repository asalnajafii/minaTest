import { __assign } from 'tslib';
import { Injectable, defineInjectable } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var FormlyJsonschema = /** @class */ (function () {
    function FormlyJsonschema() {
    }
    /**
     * @param {?} jsonSchema
     * @return {?}
     */
    FormlyJsonschema.prototype.toFieldConfig = /**
     * @param {?} jsonSchema
     * @return {?}
     */
    function (jsonSchema) {
        return this._toFieldConfig(jsonSchema);
    };
    /**
     * @param {?} jsonSchema
     * @param {?=} key
     * @return {?}
     */
    FormlyJsonschema.prototype._toFieldConfig = /**
     * @param {?} jsonSchema
     * @param {?=} key
     * @return {?}
     */
    function (jsonSchema, key) {
        var _this = this;
        /** @type {?} */
        var field = __assign({}, (key ? { key: key } : {}), { type: /** @type {?} */ (jsonSchema.type), defaultValue: jsonSchema.default, templateOptions: {
                minLength: jsonSchema.minLength,
                maxLength: jsonSchema.maxLength,
                label: jsonSchema.title,
                readonly: jsonSchema.readOnly,
                pattern: jsonSchema.pattern,
                description: jsonSchema.description,
            } });
        if (jsonSchema.enum) {
            if (field.type === 'integer' || field.type === 'number') {
                field.parsers = [Number];
            }
            field.type = 'enum';
            field.templateOptions.options = jsonSchema.enum;
            field.templateOptions["labelProp"] = function (item) { return item; };
            field.templateOptions["valueProp"] = function (item) { return item; };
        }
        switch (jsonSchema.type) {
            case 'object': {
                field.fieldGroup = [];
                Object.keys(jsonSchema.properties).forEach(function (p) {
                    /** @type {?} */
                    var child = _this._toFieldConfig(jsonSchema.properties[p], p);
                    if (Array.isArray(jsonSchema.required) && jsonSchema.required.indexOf(p) !== -1) {
                        child.templateOptions.required = true;
                    }
                    field.fieldGroup.push(child);
                });
                break;
            }
            case 'array': {
                if (!Array.isArray(jsonSchema.items)) {
                    field.fieldArray = this._toFieldConfig(/** @type {?} */ (jsonSchema.items));
                }
                else {
                    field['_fieldArray'] = [];
                    field.fieldGroup = [];
                    jsonSchema.items.forEach(function (item) { return field['_fieldArray'].push(_this._toFieldConfig(item)); });
                    if (jsonSchema.additionalItems) {
                        field['_additionalFieldArray'] = this._toFieldConfig(jsonSchema.additionalItems);
                    }
                    Object.defineProperty(field, 'fieldArray', {
                        get: function () {
                            return field['_fieldArray'][field.fieldGroup.length] || field['_additionalFieldArray'];
                        },
                        enumerable: true,
                        configurable: true,
                    });
                }
                break;
            }
        }
        return field;
    };
    FormlyJsonschema.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] },
    ];
    /** @nocollapse */ FormlyJsonschema.ngInjectableDef = defineInjectable({ factory: function FormlyJsonschema_Factory() { return new FormlyJsonschema(); }, token: FormlyJsonschema, providedIn: "root" });
    return FormlyJsonschema;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { FormlyJsonschema };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWZvcm1seS1jb3JlLWpzb24tc2NoZW1hLmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9Abmd4LWZvcm1seS9jb3JlL2pzb24tc2NoZW1hL2Zvcm1seS1qc29uLXNjaGVtYS5zZXJ2aWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1seUZpZWxkQ29uZmlnIH0gZnJvbSAnQG5neC1mb3JtbHkvY29yZSc7XG5pbXBvcnQgeyBKU09OU2NoZW1hNywgSlNPTlNjaGVtYTdUeXBlTmFtZSB9IGZyb20gJ2pzb24tc2NoZW1hJztcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBGb3JtbHlKc29uc2NoZW1hIHtcbiAgdG9GaWVsZENvbmZpZyhqc29uU2NoZW1hOiBKU09OU2NoZW1hNyk6IEZvcm1seUZpZWxkQ29uZmlnIHtcbiAgICByZXR1cm4gdGhpcy5fdG9GaWVsZENvbmZpZyhqc29uU2NoZW1hKTtcbiAgfVxuXG4gIF90b0ZpZWxkQ29uZmlnKGpzb25TY2hlbWE6IEpTT05TY2hlbWE3LCBrZXk/OiBzdHJpbmcpOiBGb3JtbHlGaWVsZENvbmZpZyB7XG4gICAgY29uc3QgZmllbGQ6IEZvcm1seUZpZWxkQ29uZmlnID0ge1xuICAgICAgLi4uKGtleSA/IHsga2V5IH0gOiB7fSksXG4gICAgICB0eXBlOiBqc29uU2NoZW1hLnR5cGUgYXMgSlNPTlNjaGVtYTdUeXBlTmFtZSxcbiAgICAgIGRlZmF1bHRWYWx1ZToganNvblNjaGVtYS5kZWZhdWx0LFxuICAgICAgdGVtcGxhdGVPcHRpb25zOiB7XG4gICAgICAgIG1pbkxlbmd0aDoganNvblNjaGVtYS5taW5MZW5ndGgsXG4gICAgICAgIG1heExlbmd0aDoganNvblNjaGVtYS5tYXhMZW5ndGgsXG4gICAgICAgIGxhYmVsOiBqc29uU2NoZW1hLnRpdGxlLFxuICAgICAgICByZWFkb25seToganNvblNjaGVtYS5yZWFkT25seSxcbiAgICAgICAgcGF0dGVybjoganNvblNjaGVtYS5wYXR0ZXJuLFxuICAgICAgICBkZXNjcmlwdGlvbjoganNvblNjaGVtYS5kZXNjcmlwdGlvbixcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIGlmIChqc29uU2NoZW1hLmVudW0pIHtcbiAgICAgIGlmIChmaWVsZC50eXBlID09PSAnaW50ZWdlcicgfHwgZmllbGQudHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgZmllbGQucGFyc2VycyA9IFtOdW1iZXJdO1xuICAgICAgfVxuICAgICAgZmllbGQudHlwZSA9ICdlbnVtJztcbiAgICAgIGZpZWxkLnRlbXBsYXRlT3B0aW9ucy5vcHRpb25zID0ganNvblNjaGVtYS5lbnVtO1xuICAgICAgZmllbGQudGVtcGxhdGVPcHRpb25zLmxhYmVsUHJvcCA9IGl0ZW0gPT4gaXRlbTtcbiAgICAgIGZpZWxkLnRlbXBsYXRlT3B0aW9ucy52YWx1ZVByb3AgPSBpdGVtID0+IGl0ZW07XG4gICAgfVxuXG4gICAgc3dpdGNoIChqc29uU2NoZW1hLnR5cGUpIHtcbiAgICAgIGNhc2UgJ29iamVjdCc6IHtcbiAgICAgICAgZmllbGQuZmllbGRHcm91cCA9IFtdO1xuICAgICAgICBPYmplY3Qua2V5cyhqc29uU2NoZW1hLnByb3BlcnRpZXMpLmZvckVhY2gocCA9PiB7XG4gICAgICAgICAgY29uc3QgY2hpbGQgPSB0aGlzLl90b0ZpZWxkQ29uZmlnKGpzb25TY2hlbWEucHJvcGVydGllc1twXSwgcCk7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoanNvblNjaGVtYS5yZXF1aXJlZCkgJiYganNvblNjaGVtYS5yZXF1aXJlZC5pbmRleE9mKHApICE9PSAtMSkge1xuICAgICAgICAgICAgY2hpbGQudGVtcGxhdGVPcHRpb25zLnJlcXVpcmVkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZmllbGQuZmllbGRHcm91cC5wdXNoKGNoaWxkKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAnYXJyYXknOiB7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShqc29uU2NoZW1hLml0ZW1zKSkge1xuICAgICAgICAgIGZpZWxkLmZpZWxkQXJyYXkgPSB0aGlzLl90b0ZpZWxkQ29uZmlnKGpzb25TY2hlbWEuaXRlbXMgYXMgSlNPTlNjaGVtYTcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZpZWxkWydfZmllbGRBcnJheSddID0gW107XG4gICAgICAgICAgZmllbGQuZmllbGRHcm91cCA9IFtdO1xuICAgICAgICAgIGpzb25TY2hlbWEuaXRlbXMuZm9yRWFjaChpdGVtID0+IGZpZWxkWydfZmllbGRBcnJheSddLnB1c2godGhpcy5fdG9GaWVsZENvbmZpZyhpdGVtKSkpO1xuICAgICAgICAgIGlmIChqc29uU2NoZW1hLmFkZGl0aW9uYWxJdGVtcykge1xuICAgICAgICAgICAgZmllbGRbJ19hZGRpdGlvbmFsRmllbGRBcnJheSddID0gdGhpcy5fdG9GaWVsZENvbmZpZyhqc29uU2NoZW1hLmFkZGl0aW9uYWxJdGVtcyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZpZWxkLCAnZmllbGRBcnJheScsIHtcbiAgICAgICAgICAgIGdldDogKCkgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gZmllbGRbJ19maWVsZEFycmF5J11bZmllbGQuZmllbGRHcm91cC5sZW5ndGhdIHx8IGZpZWxkWydfYWRkaXRpb25hbEZpZWxkQXJyYXknXTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmaWVsZDtcbiAgfVxufVxuIl0sIm5hbWVz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